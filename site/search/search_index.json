{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Thremulation Station What is it? Thremulation Station is an approachable and small-scale threat emulation and detection range. It primarily uses Elastic Security and Atomic Redteam to emulate and detect adversary activity. The project is a collection of existing tools like VirtualBox and Vagrant an to deploy a local testing environment that requires only a reasonably spec'd machine. The bottom line: Cyber Threat Detection for your laptop . Contribution How can I help? We welcome contributions! Check out the Contribution Section on how to help with both the core project and documentation. If you're lost, please ask and we can help guide you to the right place to get started. Credit Tools used and projects of inspiration etc. Elastic Atomic Redpeople Mitre Att&ck RockNSM Robox ... TODO","title":"Welcome"},{"location":"#thremulation-station","text":"","title":"Thremulation Station"},{"location":"#what-is-it","text":"Thremulation Station is an approachable and small-scale threat emulation and detection range. It primarily uses Elastic Security and Atomic Redteam to emulate and detect adversary activity. The project is a collection of existing tools like VirtualBox and Vagrant an to deploy a local testing environment that requires only a reasonably spec'd machine. The bottom line: Cyber Threat Detection for your laptop .","title":"What is it?"},{"location":"#contribution","text":"How can I help? We welcome contributions! Check out the Contribution Section on how to help with both the core project and documentation. If you're lost, please ask and we can help guide you to the right place to get started.","title":"Contribution"},{"location":"#credit","text":"Tools used and projects of inspiration etc. Elastic Atomic Redpeople Mitre Att&ck RockNSM Robox ... TODO","title":"Credit"},{"location":"contribution/","text":"Community Contribution This document aims to provides instructinos to set up, develop, and submit updates and features for this project. Here is a high level overview of the process: fork the project clone to your local machine setup local environment with docker use the local container to update documentation Install Requirements This section assumes that you are using macOS. Use the brew package manager where noted below (and generally whenever possible). Install Git: $ brew install git instructions for installing brew can be found here ADD Git the Things Clone the repo locally by copy / pasting the full command by clicking the \"Clone\" in the top right corner of the web UI: $ # example command: git clone <CLONE_URL> Change directory into the project folder: $ cd thremulation-station Create an new branch (alternate timeline) for later pull request / merging operations: $ git branch <BRANCH_NAME> Jump into your new personal branch: $ git checkout <BRANCH_NAME> Content Development TODO Submitting Changes After the above workflow is complete, it's time to submit your work for approval: With all your work committed, push your changes up to your project fork: $ git push Use the Github graphical interface to submit an official Pull Request to merge in all your changes.","title":"Contribution"},{"location":"contribution/#community-contribution","text":"This document aims to provides instructinos to set up, develop, and submit updates and features for this project. Here is a high level overview of the process: fork the project clone to your local machine setup local environment with docker use the local container to update documentation","title":"Community Contribution"},{"location":"contribution/#install-requirements","text":"This section assumes that you are using macOS. Use the brew package manager where noted below (and generally whenever possible). Install Git: $ brew install git instructions for installing brew can be found here ADD","title":"Install Requirements"},{"location":"contribution/#git-the-things","text":"Clone the repo locally by copy / pasting the full command by clicking the \"Clone\" in the top right corner of the web UI: $ # example command: git clone <CLONE_URL> Change directory into the project folder: $ cd thremulation-station Create an new branch (alternate timeline) for later pull request / merging operations: $ git branch <BRANCH_NAME> Jump into your new personal branch: $ git checkout <BRANCH_NAME>","title":"Git the Things"},{"location":"contribution/#content-development","text":"TODO","title":"Content Development"},{"location":"contribution/#submitting-changes","text":"After the above workflow is complete, it's time to submit your work for approval: With all your work committed, push your changes up to your project fork: $ git push Use the Github graphical interface to submit an official Pull Request to merge in all your changes.","title":"Submitting Changes"},{"location":"getting-started/demo-threat/","text":"Demonstration Threat - Walkthrough Now that we've gotten everything working, let's get ready to rumble! This demonstration is intended to both validate functionality of all tooling, as well as demonstrate general usage of your new local range. From your terminal run $ vagrant ssh elastic to remotely access the \"elastic\" logger / attacker box. Your prompt will update to the following [vagrant@elastomic ~]$ . Enter pwsh to drop into a Powershell prompt. Now it is time to choose what test or attack you would like to run against the remote Windows 10 box. You can browse the available tests by referencing the Atomic Redteam Docs . For this demonstration we will conduct a Mimikatz test for technique \"T1059.001 TestNumber 1\". This will use Powershell to download Mimikatz and then dump credentials on the system. Before we can run this test against the Windows 10 box we first need to setup a Powershell Session over SSH to the Windows 10 box Run the following command: $sess = New-PSSession -Hostname 192.168.33.11 -Username vagrant Here we create a variable ( $sess ) and set it to our new session we just created using the Powershell cmdlet New-PSSession. You will prompted to accept the host and enter the password (vagrant). Now in order The syntax to launch an attack against a remmote host is as follows: Invoke-AtomicTest # Run Atomic Test T1059.001 # Technique ID -TestNumbers 1 # TestNumber -Session $sess # use our Session variable Run the following command to kick things off: Invoke-AtomicTest T1059.001 -TestNumbers 1 -Session $sess Once complete now go back to your Discover tab in Kibana. In the search bar type \" Mimikatz \" and hit Enter. You should see results filtered to show the events matching the Mimikatz attack you just executed. Cleanup Now most if not all AtomicRedTeam tests come with a cleanup command to clean up your test system before executing another test. In order to cleanup our Mimikatz test we can run the same command we used to execute it this time with a -Cleanup option at the end. Run the following command to clean house: Invoke-AtomicTest T1059.001 -TestNumbers 1 -Session $sess -Cleanup When it's time to reset back to a baseline, we can again use stationctl to run a data reset. sh stationctl select 3. Management 7. Soft Reset and then Y to confirm. This will reset to the snapshots that were taken during the deployment phase. Taking Things Further Now you can dig into all of the events and start building detections based off of what logs its behavior produces after which you could run the test again to verify your detection logic is sound. You can do this by buidling your query using KQL or Lucene and then going to the \"Detections\" tab in Kibana and selecting \"Manage Detection Rules\". Congratulaltions you have executed your first test and hopefully wrote meaningful behavior based detections in order to help detect that activity in the future. Shutdown A.K.A \"It's broken and I dont know what to fix\" Once you are done playing in your sandbox, you need to clean things up. If you are in the middle of something and want to continue later, invoke a vagrant suspend . Otherwise, if you are done for the day invoke a vagrant halt . Last but not least, if you have goofed up your install you can use vagrant reload . vagrant --help is your friend.","title":"Demo Threat"},{"location":"getting-started/demo-threat/#demonstration-threat-walkthrough","text":"Now that we've gotten everything working, let's get ready to rumble! This demonstration is intended to both validate functionality of all tooling, as well as demonstrate general usage of your new local range. From your terminal run $ vagrant ssh elastic to remotely access the \"elastic\" logger / attacker box. Your prompt will update to the following [vagrant@elastomic ~]$ . Enter pwsh to drop into a Powershell prompt. Now it is time to choose what test or attack you would like to run against the remote Windows 10 box. You can browse the available tests by referencing the Atomic Redteam Docs . For this demonstration we will conduct a Mimikatz test for technique \"T1059.001 TestNumber 1\". This will use Powershell to download Mimikatz and then dump credentials on the system. Before we can run this test against the Windows 10 box we first need to setup a Powershell Session over SSH to the Windows 10 box Run the following command: $sess = New-PSSession -Hostname 192.168.33.11 -Username vagrant Here we create a variable ( $sess ) and set it to our new session we just created using the Powershell cmdlet New-PSSession. You will prompted to accept the host and enter the password (vagrant). Now in order The syntax to launch an attack against a remmote host is as follows: Invoke-AtomicTest # Run Atomic Test T1059.001 # Technique ID -TestNumbers 1 # TestNumber -Session $sess # use our Session variable Run the following command to kick things off: Invoke-AtomicTest T1059.001 -TestNumbers 1 -Session $sess Once complete now go back to your Discover tab in Kibana. In the search bar type \" Mimikatz \" and hit Enter. You should see results filtered to show the events matching the Mimikatz attack you just executed.","title":"Demonstration Threat - Walkthrough"},{"location":"getting-started/demo-threat/#cleanup","text":"Now most if not all AtomicRedTeam tests come with a cleanup command to clean up your test system before executing another test. In order to cleanup our Mimikatz test we can run the same command we used to execute it this time with a -Cleanup option at the end. Run the following command to clean house: Invoke-AtomicTest T1059.001 -TestNumbers 1 -Session $sess -Cleanup When it's time to reset back to a baseline, we can again use stationctl to run a data reset. sh stationctl select 3. Management 7. Soft Reset and then Y to confirm. This will reset to the snapshots that were taken during the deployment phase.","title":"Cleanup"},{"location":"getting-started/demo-threat/#taking-things-further","text":"Now you can dig into all of the events and start building detections based off of what logs its behavior produces after which you could run the test again to verify your detection logic is sound. You can do this by buidling your query using KQL or Lucene and then going to the \"Detections\" tab in Kibana and selecting \"Manage Detection Rules\". Congratulaltions you have executed your first test and hopefully wrote meaningful behavior based detections in order to help detect that activity in the future.","title":"Taking Things Further"},{"location":"getting-started/demo-threat/#shutdown","text":"A.K.A \"It's broken and I dont know what to fix\" Once you are done playing in your sandbox, you need to clean things up. If you are in the middle of something and want to continue later, invoke a vagrant suspend . Otherwise, if you are done for the day invoke a vagrant halt . Last but not least, if you have goofed up your install you can use vagrant reload . vagrant --help is your friend.","title":"Shutdown"},{"location":"getting-started/deployment/","text":"Deployment Once you have all the requirements installed and repo staged locally, it's time to deploy your threat hunting range. Introduction to Station Control Thremulation Station comes with a terminal control interface called stationctl . It is used to perform most major tasks within the environment. The main features provided are: stationctl is a script located in the vagrant/ directory, and must be executed from that folder to work properly TODO IMG configure and deploy a new local range check the status of a current range management tasks on a current range reloading / rebuilding boxes data reset (clearing indexes) various troubleshooting steps Let's continue setting up a local testing range by moving into the deployment steps. Deployment Options In the previous section you installed requirements and cloned the repo locally. Let's get this thing going! Move into this repo's vagrant directory. Example: cd thremulation-station/vagrant Run the stationctl control script. Example: $ ./stationctl Select option 1 and <enter> to move into the deploy menu Here you can see the main menu and it's options. From here, you have 2 paths you can take... Quick Deployment A Quick Deployment is the first and fastest option. It enables all VMs included in the range, meaning the control machine and both a windows and linux target box. Select option 1 and <enter> Then confirm this configuration to kick things off. This will download boxes / spin up / provision all boxes. Get yourself some fresh coffee, this will take 10-20 min depending on your connection. Note: This is a bandwidth-intensive task that may take a while. But take heart, this will only happen the first time you deploy. Get some coffee, and drink you cup slowly, savoring these infrequently quiet moments. Note: Note: If you don't drink coffee, I don't trust you and I don't want you to have any part of this. Custom Deployment TODO","title":"Deployment"},{"location":"getting-started/deployment/#deployment","text":"Once you have all the requirements installed and repo staged locally, it's time to deploy your threat hunting range.","title":"Deployment"},{"location":"getting-started/deployment/#introduction-to-station-control","text":"Thremulation Station comes with a terminal control interface called stationctl . It is used to perform most major tasks within the environment. The main features provided are: stationctl is a script located in the vagrant/ directory, and must be executed from that folder to work properly TODO IMG configure and deploy a new local range check the status of a current range management tasks on a current range reloading / rebuilding boxes data reset (clearing indexes) various troubleshooting steps Let's continue setting up a local testing range by moving into the deployment steps.","title":"Introduction to Station Control"},{"location":"getting-started/deployment/#deployment-options","text":"In the previous section you installed requirements and cloned the repo locally. Let's get this thing going! Move into this repo's vagrant directory. Example: cd thremulation-station/vagrant Run the stationctl control script. Example: $ ./stationctl Select option 1 and <enter> to move into the deploy menu Here you can see the main menu and it's options. From here, you have 2 paths you can take...","title":"Deployment Options"},{"location":"getting-started/deployment/#quick-deployment","text":"A Quick Deployment is the first and fastest option. It enables all VMs included in the range, meaning the control machine and both a windows and linux target box. Select option 1 and <enter> Then confirm this configuration to kick things off. This will download boxes / spin up / provision all boxes. Get yourself some fresh coffee, this will take 10-20 min depending on your connection. Note: This is a bandwidth-intensive task that may take a while. But take heart, this will only happen the first time you deploy. Get some coffee, and drink you cup slowly, savoring these infrequently quiet moments. Note: Note: If you don't drink coffee, I don't trust you and I don't want you to have any part of this.","title":"Quick Deployment"},{"location":"getting-started/deployment/#custom-deployment","text":"TODO","title":"Custom Deployment"},{"location":"getting-started/initial-access/","text":"Initial Access Now it's time to really get into things. Getting Status Now that we've deployed, let's make sure everything is up and running. So, fire stationctl back up and let's do that. sh stationctl , select 2. Status . This will run through a check of the Vagrant boxes, VirtualBox machines, and the status of Elasticsearch and Kibana. Of note, because Elasticsearch is only a single node installation, the status will always be Yellow. Everything is fine. Interface Login The environment is designed for users to interact with 2 primary interfaces: Atomic Redteam - Execute Threats This adversary emulation toolset is accessed by sshing into the \"elastic\" box and starting a powershell session. From the $(pwd)/vagrant directory, ssh to the elastic vbox: $ vagrant ssh ts.elastomic start a powershell session $ pwsh View the usage guide to learn more about executing Atomic Red Team. Kibana WebUI - Detect Threats To reach Kibana browse to localhost:5601 Kibana Credentials user: vagrant pass: vagrant Once in Kibana click the 3 hash dropdown menu in the upper left corner of the UI and select the \"Discover\" tab. Ensure that the timepicker is set to the most recent timeframe, example \"Last 24 hours\".","title":"Initial Access"},{"location":"getting-started/initial-access/#initial-access","text":"Now it's time to really get into things.","title":"Initial Access"},{"location":"getting-started/initial-access/#getting-status","text":"Now that we've deployed, let's make sure everything is up and running. So, fire stationctl back up and let's do that. sh stationctl , select 2. Status . This will run through a check of the Vagrant boxes, VirtualBox machines, and the status of Elasticsearch and Kibana. Of note, because Elasticsearch is only a single node installation, the status will always be Yellow. Everything is fine.","title":"Getting Status"},{"location":"getting-started/initial-access/#interface-login","text":"The environment is designed for users to interact with 2 primary interfaces: Atomic Redteam - Execute Threats This adversary emulation toolset is accessed by sshing into the \"elastic\" box and starting a powershell session. From the $(pwd)/vagrant directory, ssh to the elastic vbox: $ vagrant ssh ts.elastomic start a powershell session $ pwsh View the usage guide to learn more about executing Atomic Red Team. Kibana WebUI - Detect Threats To reach Kibana browse to localhost:5601 Kibana Credentials user: vagrant pass: vagrant Once in Kibana click the 3 hash dropdown menu in the upper left corner of the UI and select the \"Discover\" tab. Ensure that the timepicker is set to the most recent timeframe, example \"Last 24 hours\".","title":"Interface Login"},{"location":"getting-started/installation/","text":"Installation A simple user experience is the priority. A brief overview of setup is this: Clone the project Use the CLI to deploy your range Reference the User Guide at thremulation.io Use the CLI to perform cleanup / reset tasks Getting Requirements Following the installation steps for your host platform. If you don't see your OS flavor, consider contributing . macOS Install the Homebrew package manager Update brew: brew update Install remaining requirements. You can copy / paste the following into your terminal: brew install --cask virtualbox vagrant brew install git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Windows10 If you're on a Windows box, we recommend using Chocolatey for package management. Install remaining requirements. You can copy / paste the following into your terminal: choco install virtualbox vagrant choco install git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Note: Vagrant requires a restart as part of the installation. Linux (RHEL) This section assumes that you're using a RHEL-based distro, preferrably Centos 7. All commands assume a root shell ( sudo -s ). Install requirements yum groupinstall -y \"Development Tools\" yum install -y \\ kernel-devel \\ kernel-devel-3.10.0-1127.el7.x86_64 \\ epel-release \\ yum install -y git Install VirtualBox a. curl -o /etc/yum.repos.d/virtualbox.repo http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo b. rpm --import https://www.virtualbox.org/download/oracle_vbox.asc c. yum install -y VirtualBox-6.0 Install Vagrant a. yum install -y https://releases.hashicorp.com/vagrant/2.2.10/vagrant_2.2.10_x86_64.rpm b. vagrant plugin install vagrant-disksize c. vagrant plugin install vagrant-vbguest Getting the Project Now that you have git installed, you can clone the project locally: $ git clone https://github.com/thremulation-station/thremulation-station.git","title":"Installation"},{"location":"getting-started/installation/#installation","text":"A simple user experience is the priority. A brief overview of setup is this: Clone the project Use the CLI to deploy your range Reference the User Guide at thremulation.io Use the CLI to perform cleanup / reset tasks","title":"Installation"},{"location":"getting-started/installation/#getting-requirements","text":"Following the installation steps for your host platform. If you don't see your OS flavor, consider contributing . macOS Install the Homebrew package manager Update brew: brew update Install remaining requirements. You can copy / paste the following into your terminal: brew install --cask virtualbox vagrant brew install git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Windows10 If you're on a Windows box, we recommend using Chocolatey for package management. Install remaining requirements. You can copy / paste the following into your terminal: choco install virtualbox vagrant choco install git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Note: Vagrant requires a restart as part of the installation. Linux (RHEL) This section assumes that you're using a RHEL-based distro, preferrably Centos 7. All commands assume a root shell ( sudo -s ). Install requirements yum groupinstall -y \"Development Tools\" yum install -y \\ kernel-devel \\ kernel-devel-3.10.0-1127.el7.x86_64 \\ epel-release \\ yum install -y git Install VirtualBox a. curl -o /etc/yum.repos.d/virtualbox.repo http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo b. rpm --import https://www.virtualbox.org/download/oracle_vbox.asc c. yum install -y VirtualBox-6.0 Install Vagrant a. yum install -y https://releases.hashicorp.com/vagrant/2.2.10/vagrant_2.2.10_x86_64.rpm b. vagrant plugin install vagrant-disksize c. vagrant plugin install vagrant-vbguest","title":"Getting Requirements"},{"location":"getting-started/installation/#getting-the-project","text":"Now that you have git installed, you can clone the project locally: $ git clone https://github.com/thremulation-station/thremulation-station.git","title":"Getting the Project"},{"location":"getting-started/manage/","text":"Management Features TODO See the Troubleshooting Section for more details on working out any issues you may experience.","title":"Management"},{"location":"getting-started/manage/#management-features","text":"TODO See the Troubleshooting Section for more details on working out any issues you may experience.","title":"Management Features"},{"location":"handbook/build-your-base/","text":"Build Your Base","title":"Build Your Base"},{"location":"handbook/build-your-base/#build-your-base","text":"","title":"Build Your Base"},{"location":"handbook/developing-methodology/","text":"Developing a Hunt Methodology","title":"Developing a Methodology"},{"location":"handbook/developing-methodology/#developing-a-hunt-methodology","text":"","title":"Developing a Hunt Methodology"},{"location":"handbook/lab1/","text":"","title":"Lab 1 - Subtitle"},{"location":"handbook/lab2/","text":"","title":"Lab 2 - Subtitle"},{"location":"handbook/lab3/","text":"","title":"Lab 3 - Subtitle"},{"location":"handbook/tools/","text":"Tools of the Trade","title":"Tools of the Trade"},{"location":"handbook/tools/#tools-of-the-trade","text":"","title":"Tools of the Trade"},{"location":"handbook/ts-walkthrough/","text":"","title":"Platform Walkthrough"},{"location":"handbook/understanding-adversary/","text":"Understanding the Adversary","title":"Understanding the Adversary"},{"location":"handbook/understanding-adversary/#understanding-the-adversary","text":"","title":"Understanding the Adversary"},{"location":"handbook/what-is-threathunting/","text":"Host Based Threat Hunting Handbook","title":"What is Threat Hunting?"},{"location":"handbook/what-is-threathunting/#host-based-threat-hunting-handbook","text":"","title":"Host Based Threat Hunting Handbook"},{"location":"handbook/whats-in-the-data/","text":"","title":"What's in the Data"},{"location":"handbook/writing-detections/","text":"Writing Resilient Detections in Kibana","title":"Writing Resilient Detections"},{"location":"handbook/writing-detections/#writing-resilient-detections-in-kibana","text":"","title":"Writing Resilient Detections in Kibana"},{"location":"home/about/","text":"About the Project TL;DR If you're ready to skip all this info and get things running, jump to installation . How is Thremulation-Station different? Not everyone has a blade server heating their home from a closet...and not everyone, be it a junior hunter/red teamer who is just getting started or an operator with 20 years experience, is an engineer that can stitch all of the complex services together to grow or sharpen your skills. Who is it for? This project has many practical use cases, and we're excited to see how it's used. A few examples: Cyber Defense education Generating training data Threat intelligence training Writing and validating detection rules Writing and testing threat tactics and techniques","title":"About TS"},{"location":"home/about/#about-the-project","text":"","title":"About the Project"},{"location":"home/about/#tldr","text":"If you're ready to skip all this info and get things running, jump to installation .","title":"TL;DR"},{"location":"home/about/#how-is-thremulation-station-different","text":"Not everyone has a blade server heating their home from a closet...and not everyone, be it a junior hunter/red teamer who is just getting started or an operator with 20 years experience, is an engineer that can stitch all of the complex services together to grow or sharpen your skills.","title":"How is Thremulation-Station different?"},{"location":"home/about/#who-is-it-for","text":"This project has many practical use cases, and we're excited to see how it's used. A few examples: Cyber Defense education Generating training data Threat intelligence training Writing and validating detection rules Writing and testing threat tactics and techniques","title":"Who is it for?"},{"location":"home/node-roles/","text":"Node Roles This section lists the building blocks of how each node is set up. Elastomic Purpose The \" elastomic \" node is the first and only required node, and is the crux of the entire project. It's essentially a \"Purple Teaming\" control box that is used to both execute attacks and capture logs of those attacks . Features Elasticsearch Kibana Atomic Redteam UI Powershell Running Services Elasticsearch Kibana Windows10 Workstation Purpose The Windows10 node acts as the primary target system to execute effects against, in order to generate security event data. Features Built from Windows 10 x64 Enterprise trial ISO WinRM Enable (unauthenticated mode, for Packer/Vagrant to use) One user vagrant All updates applied during build process Includes VM guest additions Turn on RDP Set the network type for the virtual adapter to 'Home' and not bug you about it Turns autologin off Running Services Elastic Agent Sysmon Centos Server Purpose The intent of the centos node is emulate hosting the typical services hosted on a small enterprise environment and provided another OS attack surface. Features Built from CentOS 7 ISO SELinux enforcing One user vagrant All updates applied during build process Includes VM guest additions Turns autologin off Running Services Auditbeat Auditd Filebeat Cockpit Nginx Rsyslog Samba More details on the usage of each tool can be found in the Toolset Section .","title":"Node Roles"},{"location":"home/node-roles/#node-roles","text":"This section lists the building blocks of how each node is set up.","title":"Node Roles"},{"location":"home/node-roles/#elastomic","text":"","title":"Elastomic"},{"location":"home/node-roles/#purpose","text":"The \" elastomic \" node is the first and only required node, and is the crux of the entire project. It's essentially a \"Purple Teaming\" control box that is used to both execute attacks and capture logs of those attacks .","title":"Purpose"},{"location":"home/node-roles/#features","text":"Elasticsearch Kibana Atomic Redteam UI Powershell","title":"Features"},{"location":"home/node-roles/#running-services","text":"Elasticsearch Kibana","title":"Running Services"},{"location":"home/node-roles/#windows10-workstation","text":"","title":"Windows10 Workstation"},{"location":"home/node-roles/#purpose_1","text":"The Windows10 node acts as the primary target system to execute effects against, in order to generate security event data.","title":"Purpose"},{"location":"home/node-roles/#features_1","text":"Built from Windows 10 x64 Enterprise trial ISO WinRM Enable (unauthenticated mode, for Packer/Vagrant to use) One user vagrant All updates applied during build process Includes VM guest additions Turn on RDP Set the network type for the virtual adapter to 'Home' and not bug you about it Turns autologin off","title":"Features"},{"location":"home/node-roles/#running-services_1","text":"Elastic Agent Sysmon","title":"Running Services"},{"location":"home/node-roles/#centos-server","text":"","title":"Centos Server"},{"location":"home/node-roles/#purpose_2","text":"The intent of the centos node is emulate hosting the typical services hosted on a small enterprise environment and provided another OS attack surface.","title":"Purpose"},{"location":"home/node-roles/#features_2","text":"Built from CentOS 7 ISO SELinux enforcing One user vagrant All updates applied during build process Includes VM guest additions Turns autologin off","title":"Features"},{"location":"home/node-roles/#running-services_2","text":"Auditbeat Auditd Filebeat Cockpit Nginx Rsyslog Samba More details on the usage of each tool can be found in the Toolset Section .","title":"Running Services"},{"location":"home/topology/","text":"Project Topology Let's look at an overview of the mini-range and demonstrate a basic exercise workflow. Component Overview There are three basic components: The Elastic Stack - for analyzing data Atomic Red - for generating adversary activity Victim machines - to be targeted by adversary activity Basic Workflow","title":"Topology"},{"location":"home/topology/#project-topology","text":"Let's look at an overview of the mini-range and demonstrate a basic exercise workflow.","title":"Project Topology"},{"location":"home/topology/#component-overview","text":"There are three basic components: The Elastic Stack - for analyzing data Atomic Red - for generating adversary activity Victim machines - to be targeted by adversary activity","title":"Component Overview"},{"location":"home/topology/#basic-workflow","text":"","title":"Basic Workflow"},{"location":"support/glossary/","text":"Glossary definitions","title":"Glossary"},{"location":"support/glossary/#glossary","text":"definitions","title":"Glossary"},{"location":"support/references/","text":"References Blue Team Elasticsearch Kibana Beats Agents Red Team Atomic Red Team Atomic Redteam Docs CALDERA TODO","title":"References"},{"location":"support/references/#references","text":"","title":"References"},{"location":"support/references/#blue-team","text":"Elasticsearch Kibana Beats Agents","title":"Blue Team"},{"location":"support/references/#red-team","text":"Atomic Red Team Atomic Redteam Docs CALDERA TODO","title":"Red Team"},{"location":"support/troubleshoot/","text":"Troubleshooting Guide Virtual Machines stationctl status stationctl this stationctl that stationctl more Blue Team Tooling TODO Red Team Tooling TODO","title":"Troubleshoot"},{"location":"support/troubleshoot/#troubleshooting-guide","text":"","title":"Troubleshooting Guide"},{"location":"support/troubleshoot/#virtual-machines","text":"stationctl status stationctl this stationctl that stationctl more","title":"Virtual Machines"},{"location":"support/troubleshoot/#blue-team-tooling","text":"TODO","title":"Blue Team Tooling"},{"location":"support/troubleshoot/#red-team-tooling","text":"TODO","title":"Red Team Tooling"},{"location":"toolset/","text":"Project Toolbox At the end of the day, this project builds some fantastic open source lego pieces together to solve a problem. Here's what is being leveraged to make locally served thremulation magic happen: Infrastructure VirtualBox This serves as the \"hypervisor\" that your virtual machines will be built on Vagrant (and assorted plugins) This is an automation and orchestration platform to build the VMs that will be used for the project Threat Emulation Threat Emulation (or red teaming) is an attack simulation designed to measure how well defenders can detect an attack from a real-life adversary. To put threat emulation in layman\u2019s terms, it\u2019s \u201cethical hacking\u201d \u2014 a way for teams to test how well defenders would fare in the face of a real attack. The premise of red teaming is comparable to the old sports saying, \"the best offense is a good defense.\" Red teaming helps defenders learn about new adversary techniques. To provide threat emulation, we have used Red Canary's open source project, Atomic Red Team and MITRE's CALDERA project. Atomic Red Atomic Red Team is a library of simple tests that every security team can execute to test their defenses. Tests are focused, have few dependencies, and are defined in a structured format that can be used by automation frameworks. Caldera CALDERA\u2122 is a cyber security framework designed to easily run autonomous breach-and-simulation exercises. It can also be used to run manual red-team engagements or automated incident response. Threat Logging & Detection Threat detection (or blue teaming) is the process of defending assets and infrastructure from adversaries. This is achieved through a combination of signature-based detections and also access to all available log data to find activity that does not trigger any known signatures. To provide logging and detection, we are using the Elastic Stack - Elasticsearch , Kibana , Beats , and Agents . Elasticsearch Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search, fine\u2011tuned relevancy, and powerful analytics that scale with ease. We store and organize our data here. Kibana Kibana is a free and open user interface that lets you visualize your Elasticsearch data and navigate the Elastic Stack. Do anything from tracking query load to understanding the way requests flow through your apps. We use Kibana to visualize our data Elastic Security Everything you love about the free and open Elastic Stack \u2014 geared toward security information and event management (SIEM). Leverage the speed, scale, and relevance of Elasticsearch for SIEM use cases to drive your security operations. We use the Elastic Security (SIEM) to organize all of our security relevant data. Elastic Agent The Elastic Agent is a wrapper for centralized management of endpoint collection. We use the Elastic Agent to collect endpoint logs. This replaces Elastic \"Beats\" (which are now folded into the Agent).","title":"Overview"},{"location":"toolset/#project-toolbox","text":"At the end of the day, this project builds some fantastic open source lego pieces together to solve a problem. Here's what is being leveraged to make locally served thremulation magic happen:","title":"Project Toolbox"},{"location":"toolset/#infrastructure","text":"VirtualBox This serves as the \"hypervisor\" that your virtual machines will be built on Vagrant (and assorted plugins) This is an automation and orchestration platform to build the VMs that will be used for the project","title":"Infrastructure"},{"location":"toolset/#threat-emulation","text":"Threat Emulation (or red teaming) is an attack simulation designed to measure how well defenders can detect an attack from a real-life adversary. To put threat emulation in layman\u2019s terms, it\u2019s \u201cethical hacking\u201d \u2014 a way for teams to test how well defenders would fare in the face of a real attack. The premise of red teaming is comparable to the old sports saying, \"the best offense is a good defense.\" Red teaming helps defenders learn about new adversary techniques. To provide threat emulation, we have used Red Canary's open source project, Atomic Red Team and MITRE's CALDERA project.","title":"Threat Emulation"},{"location":"toolset/#atomic-red","text":"Atomic Red Team is a library of simple tests that every security team can execute to test their defenses. Tests are focused, have few dependencies, and are defined in a structured format that can be used by automation frameworks.","title":"Atomic Red"},{"location":"toolset/#caldera","text":"CALDERA\u2122 is a cyber security framework designed to easily run autonomous breach-and-simulation exercises. It can also be used to run manual red-team engagements or automated incident response.","title":"Caldera"},{"location":"toolset/#threat-logging-detection","text":"Threat detection (or blue teaming) is the process of defending assets and infrastructure from adversaries. This is achieved through a combination of signature-based detections and also access to all available log data to find activity that does not trigger any known signatures. To provide logging and detection, we are using the Elastic Stack - Elasticsearch , Kibana , Beats , and Agents .","title":"Threat Logging &amp; Detection"},{"location":"toolset/#elasticsearch","text":"Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search, fine\u2011tuned relevancy, and powerful analytics that scale with ease. We store and organize our data here.","title":"Elasticsearch"},{"location":"toolset/#kibana","text":"Kibana is a free and open user interface that lets you visualize your Elasticsearch data and navigate the Elastic Stack. Do anything from tracking query load to understanding the way requests flow through your apps. We use Kibana to visualize our data","title":"Kibana"},{"location":"toolset/#elastic-security","text":"Everything you love about the free and open Elastic Stack \u2014 geared toward security information and event management (SIEM). Leverage the speed, scale, and relevance of Elasticsearch for SIEM use cases to drive your security operations. We use the Elastic Security (SIEM) to organize all of our security relevant data.","title":"Elastic Security"},{"location":"toolset/#elastic-agent","text":"The Elastic Agent is a wrapper for centralized management of endpoint collection. We use the Elastic Agent to collect endpoint logs. This replaces Elastic \"Beats\" (which are now folded into the Agent).","title":"Elastic Agent"},{"location":"toolset/caldera-usage/","text":"Caldera Basic Usage Lab Goals At the end of this lab you will be able to: Startup the Caldera server Understand and use the Caldera interface Configure and deploy a Caldera agent to a \u201cvictim\u201d host 4. View and create adversary profiles Create and run an operation Hunt for operation activity in Kibana Pre-Req Setup for this Lab Vagrant up the elastomic and windows10 box: vagrant up ts.elastomic ts.windows10 Establish an RDP session with the windows10 box with the RDPclient of your choice, with the following data: Host:192.168.33.11 User:vagrant Password:vagrant Startup Caldera comes pre-installed on the elastomic host, and is located in the /home/vagrant directory. In order to utilize it you only need to start up the Caldera server, so let\u2019s do that. Firstsshintotheelastomicboxwiththefollowingcommand:vagrantssh ts.elastomic Onceyouaressh\u2019dintoelastomicmoveintotheCalderadirectorywith the following command : cd caldera NowtostartupourCalderaserverrunthefollowingcommandwhichwill startup the server and host it at localhost:8888 : python3 server.py \u2014 insecure The server startup will take at most 30 seconds to initiate, after which we can validate by going to your local browser and browsing to http://localhost:8888. You should see the following: Interface \u2013 Nowthatwehaveourserverrunninghostedlocallyonport8888wecan login and take a look around \u2013 DefaultcredentialsforyourCalderaserverare(admin:admin) \u2013 AftersuccessfullylogginginyoushouldseetheCalderawelcomepage \u2013 Clickonthehamburgermenunexttonavigateinthetopleftcornerto display the different options Caldera provides \u2013 Theprimarymenuoptionsyouwillbeconcernedwithforusagearethe agents, adversaries and operations selections Agents \u2013 Wewillstartwiththeagentstabsogoaheadandclickitafterwhichyou will see the following screen \u2013 Thistaballowsustoconfigure,createanddeployanagentononeofour \u201cvictim\u201d boxes that will communicate back to our Caldera server where we can run our operations from \u2013 Beforewecreateouragentletsexploresomeoftheupfront configuration options we have available \u2013 Thefirstoptionisthebeacontimer \u2013 Beacontimerallowyouspecifyhowlongyouragentwillwaittocheckin and send back data. By default these values, as you will see, are set to 30 and 60 which is fine. You may want to change these values if you are emulating a specific adversary or just trying to remain undetected from any network hunting the defender would be doing. \u2013 Thesecondoptionisthewatchdogtimer \u2013 Watchdogtimerletsyousetthenumberofsecondstowait,oncethe server is unreachable, before killing an agent. \u2013 Thethirdoptionistheuntrustedtimer \u2013 Untrustedtimersetsthenumberofsecondstowaitbeforemarkinga missing agent as untrusted. \u2013 Thefourthoptionistheimplantname \u2013 Thebasenameofnewly-spawnedagents.Ifnecessary,anextensionwill be added when an agent is created (ex: splunkd will become splunkd.exe when spawning an agent on a Windows machine). \u2013 Thefinaloptionavailabletousisthebootstrapability \u2013 Bootstrapabilityisacomma-separatedlistofabilityIDstoberunona new agent beacon. By default, this is set to run a command which clears command history. \u2013 Alrightnowthatweunderstandtheavailableconfigurationoptionslets go ahead and generate a new agent for us to deploy to our windows10 box \u2013 Wearegoingtousethedefaultvaluesforthistestsogoaheadand choose \u201cclick here to deploy an agent\u201d button and you will see the following option \u2013 Ifyouclickthedropdownfor\u201cChooseanagent\u201dyouwillseeanumberof options \u2013 Asyoucanseeeachoftheseagentsprovidesabriefdescription \u2013 TheonlytwoIhaveutilizedandtestedarethe54ndc47andManxagents \u2013 Forgeneralpurposesandeverydayuseyouwillusethe54ndc47agent as it was developed directly for use with Caldera \u2013 Choosethe54ndc47agentandselectthe\u201cAllplatforms\u201ddropdownto choose your OS \u2013 Forthislabwewillchoosewindowsforourwindows10host \u2013 Fortheapp.contact.httpfieldyouwillsupplytheiporurlofyourCaldera server which in our case is 192.168.33.10:8888 \u2013 YouanseeCalderageneratesaPowershellcommandtodownloadand execute the Caldera GoLang agent on your windows10 host \u2013 Nowcopythatcommandinfullandletsgoovertoourwindows10RDP session \u2013 OpenaPowershellpromptasadministrator powershell \u2013 NowpasteyourCalderaagentPowershellone-linerandhitenterto download and execute the agent \u2013 OncethisisdonewecangobacktoourCalderaserverGUI \u2013 Clickthexinthetoprightcorneroftheagentselectionboxyouwerein and you should now see an agent has checked into the Caldera server \u2013 Beforewemoveontoemulatingadversaryactivityletsexploresomeof the information the agent provides us \u2013 Asyoucanseeifgivesauniqueagentid,thehost,protocol,agent \u2013 process id and if the agent is running in a privileged context or not \u2013 Butifweclickonthegreenprocessidwecanseealotmoredetailtous \u2013 Asyoucannowseewehaveamuchmoredetailedviewofouragentto include parent process id, location of our executable and the user we are running as \u2013 Wealsoaregiventheabilitytoeditcertainfieldsdenotedby*andkill our agent \u2013 Nowclickthexinthetoprighttoleavethisview Adversaries \u2013 Selectthehamburgermenuinthetopleftofyourscreenandselectthe adversaries tab which will open and drop you down to the following screen \u2013 Asyoucanseetheadversariestaballowsustocreateourowncustom profile (adversary) or view the profiles already created within Caldera \u2013 Letstakealookatapre-madeadversaryprofilesowecanexplorewhat makes up a profile \u2013 Clickthe\u201cSelectanexistingprofile\u201ddropdownandselecttheEnumerator profile \u2013 Enumeratoristhenameoftheprofile \u2013 EnumerateProcessesinallthewaysisadescriptionoftheprofile \u2013 BeneathorderingyoucanseethechooseTTPsandinwhatorderthey are to be executed \u2013 Thesearethebasicbuildingblocksofanadversary \u2013 LetlookatwhatoneoftheseTTPslooklikeupclose \u2013 ClickontheWMICProcessEnumerationblockandyoushouldseethe following screen \u2013 HerewecanseeeverythingaboutthisspecificTTP.Youseeitsuniqueid, name, description, tactic, technique id and technique name. \u2013 Belowthegenericinformationyoucanseewhatplatformitiscompatible with and what is being utilized to execute this technique \u2013 Scrolldownfurtherandyouwillseethecommandthatisbeingexecuted along with a cleanup command if one exists and the timeout value for the command \u2013 Nowclickthexinthetoprightcornerofthescreenandwewillcreate our own profile we will execute on our \u201cvictim\u201d \u2013 Underprofileschangethesliderfromviewtoadd \u2013 I\u2019mgoingtousetheprofilenameofTestbutyoucanusewhatevername you please \u2013 NextIwillfilloutagooddescriptionformyprofilewhichforthiswillbe\u201cA set of TTPs for displaying Caldera\u2019s functionality\u201d \u2013 Nowletsaddsomeabilitiestoourprofile \u2013 Clickthe+addabilityselectorontherightsideofyourscreenwhichwill pop up a familiar menu \u2013 LetsselectaTTP \u2013 Iwillselectthediscoverytactic,T1007SystemServiceDiscoveryand Discover System Services ability \u2013 IfyouscrolldownyouwillseethecommandbeingrunisthePowershell cmdlet Get-Service executed by Powershell as evidenced by the psh executor \u2013 Nowletsclickthegreenaddtoadversarybuttoninthebottomleftofthe screen to add this TTP to our profile \u2013 AsyouseewenowhaveaddedthisTTPasthefirststepinourattack \u2013 I\u2019veaddedasecondattackabilityandyoucanaddasmanyasyouwish but for my purposes here this will be fine \u2013 Letssavethisprofileandmoveontoexecutingitwithouragentonthe windows10 box \u2013 OncesavedyouwillseeAdversarySaved!atthebottomofyourscreen adversary saved! Operations \u2013 ScrollupandclickthehamburgermenuinthetopleftoftheCaldera interface and select the Operations tab to display the following screen IMG \u2013 Therearecurrentlynooperationscreatedsoclickingthe\u201cOperations\u201d dropdown will not display anything which is why we are going to create our own operation \u2013 Clicktheslidertochangeitfromviewtoadd \u2013 Thisallowsyoutospecifyanumberofoptionsinordertoconfigureyour operation successfully IMG \u2013 IwillnameourOperationTestbutagainyoucannameitwhateveryou want \u2013 ClickBasicOptionsandwewilldiscusswhatitprovidesus IMG \u2013 Thefirstdropdownsetsyourgroupandbydefaultallagentsareadded to the \u201cred\u201d group which is what I have selected \u2013 Theseconddropdownsetstheprofileyouwouldlikethisoperationto run. I have selected the Test profile I created earlier \u2013 Thethirddropdownsetstheoptiontoclosethisoperationorleaveit open for future execution. I have set this to auto close since this is a lab \u2013 Thelastdropdownsetstheoperationtorunimmediatelyafterstartingor pausing for you to inspect it. I have set it run immediately \u2013 NowclickBasicOptionstocloseitandclickAutonomous IMG \u2013 Thefirstdropdownsetstheoperationtorunautonomouslyormanually with approval of each TTP executed \u2013 Theseconddropdownsetswhichplanneryouwillutilizetoexecutethe operation. A planner is a module within CALDERA which contains logic for \u2013 how a running operation should make decisions about which abilities to use and in what order \u2013 Thefinaldropdownsetsthefactsyouwilluseduringtheoperation.A fact is an identifiable piece of information about a given computer. Facts are directly related to variables, which can be used inside abilities \u2013 NowclickAutonomoustocloseitandclickonStealth IMG \u2013 Theonlydropdownhereallowsforyoutoselectanumberofobfuscation techniques to obscure the commands you run on the host system \u2013 Thesecondfieldsetsthejittervalue.Agentsnormallycheckinwith CALDERA every 60 seconds. Once they realize they are part of an active operation, agents will start checking in according to the jitter time, which is by default 2/8. This fraction tells the agents that they should pause between 2 and 8 seconds (picked at random each time an agent checks in) before using the next ability \u2013 Thevisibilitysliderletsyousethowstealthyyouroperationwillremain. How visible should the operation be to the defense. Defaults to 51 because each ability defaults to a visibility of 50. Abilities with a higher visibility than the operation visibility will be skipped \u2013 ClickStealthtocloseit \u2013 Don\u2019tclickSchedule.Scheduleallowsyouschedulethisoperationfora later date which we will not be doing \u2013 Nowclickstarttobeginyouroperationandselectincludeagentoutput IMG \u2013 ThereisalotherebutIthinkmuchofitisselfexplanatory \u2013 Thefirstareatonoteistheabilityatthetopofthescreentostop,pause, play, and skip the operation \u2013 Thenexttotheseoptionsistheabilityatanytimetoswitchyour operation from a autonomous operation to a manual one \u2013 NowwecanseethatourDiscoverSystemServicesabilitywasexecuted on the host and since we enabled the inclusion of agent output if we can \u2013 click the star at the end of the ability line we should be able to see the output from the command IMG \u2013 Clickthexinthetoprightcornertoreturntotheoperationscreen \u2013 Congratulations!!Youhavesuccessfullydeployedanagent,createdan adversary profile, created an operation and run that profile against a host. \u2013 Nowletscleanup Clean Up \u2013 Nownormallyyoumightwanttosavealloperationsandprofilesyou create but in this instance I figure I\u2019d show you how to get rid of them so you can start fresh \u2013 Firstwewilldeletethisoperation.Goaheadandclickthegreendelete button located under download report which will revert your screen back to the original operations screen \u2013 Nextlickthexinthetopleftcorneroftheoperationstabtoremoveit from your interface \u2013 Youshouldnowbeontheprofilestabwhichyoucandothesamething in. Click the green delete profile button, click ok and then the red x in the \u2013 top left hand corner \u2013 Nowforthefinalpieceletskillouragentandremoveitfromtheagents tab \u2013 ClickthegreenagentPIDandselectkillagentthenselectok \u2013 WaitfortheagentPIDtoturnredorrefreshtheCalderabrowsertaband go back to the agents tab. This may take a minute or two depending on the agents configuration \u2013 Oncetheagentshowsasterminatedclicktheredxattheendofitto remove it from your view and you are all cleaned up....aside from one thing. The windows box. \u2013 Ifyouwanttoensureacleanwindowsboxyoucanusethestationctl management menu to perform a soft reset and revert the windows box back to a clean instance taken upon deployment Thrunting \u2013 Now lets switch overtoourKibanabrowsertabandgointotheDiscover tab within Kibana selecting the logs-* index IMG \u2013 The best way to view the activity we conducted on our host is to filter down the data to just want we want to see in this case I want to see process creation events and I want to display the user, parent process name, executing process name and command line. \u2013 Since the agent we used was named \"Splunkd\", filtering down the wanted activity will be easy. IMG Let's explain what's been done here: I've filtered the data set using the winlog channel field which contains the different event subscriptions we have available to us. Since we want a specific windows event ID, I chose the Security channel. \u2013 I then wanted to specify the process creation event id of 4688, which I did by utilizing the event.code field. \u2013 Lastly, I knew the name of my implant was Splunkd so I filtered on the parent process name field to specify the Splunkd process name \u2013 To view the specific fields I wanted to see, I can simply search for the field names on the left hand side and added them to my table \u2013 As you can see, we have this Splunkd.exe spawning Powershell.exe as the user vagrant on the windows10 host to run the Get-Service command \u2013 There are a number of different detections we could write for this, but that is a lab for another day. Hopefully this lab helped you gain a basic understand of Caldera, how a C2 framework works and how to hunt the activity Caldera conducts using Kibana.","title":"Caldera Usage"},{"location":"toolset/caldera-usage/#caldera-basic-usage-lab","text":"","title":"Caldera Basic Usage Lab"},{"location":"toolset/caldera-usage/#goals","text":"At the end of this lab you will be able to: Startup the Caldera server Understand and use the Caldera interface Configure and deploy a Caldera agent to a \u201cvictim\u201d host 4. View and create adversary profiles Create and run an operation Hunt for operation activity in Kibana","title":"Goals"},{"location":"toolset/caldera-usage/#pre-req-setup-for-this-lab","text":"Vagrant up the elastomic and windows10 box: vagrant up ts.elastomic ts.windows10 Establish an RDP session with the windows10 box with the RDPclient of your choice, with the following data: Host:192.168.33.11 User:vagrant Password:vagrant","title":"Pre-Req Setup for this Lab"},{"location":"toolset/caldera-usage/#startup","text":"Caldera comes pre-installed on the elastomic host, and is located in the /home/vagrant directory. In order to utilize it you only need to start up the Caldera server, so let\u2019s do that. Firstsshintotheelastomicboxwiththefollowingcommand:vagrantssh ts.elastomic Onceyouaressh\u2019dintoelastomicmoveintotheCalderadirectorywith the following command : cd caldera NowtostartupourCalderaserverrunthefollowingcommandwhichwill startup the server and host it at localhost:8888 : python3 server.py \u2014 insecure The server startup will take at most 30 seconds to initiate, after which we can validate by going to your local browser and browsing to http://localhost:8888. You should see the following:","title":"Startup"},{"location":"toolset/caldera-usage/#interface","text":"\u2013 Nowthatwehaveourserverrunninghostedlocallyonport8888wecan login and take a look around \u2013 DefaultcredentialsforyourCalderaserverare(admin:admin) \u2013 AftersuccessfullylogginginyoushouldseetheCalderawelcomepage \u2013 Clickonthehamburgermenunexttonavigateinthetopleftcornerto display the different options Caldera provides \u2013 Theprimarymenuoptionsyouwillbeconcernedwithforusagearethe agents, adversaries and operations selections","title":"Interface"},{"location":"toolset/caldera-usage/#agents","text":"\u2013 Wewillstartwiththeagentstabsogoaheadandclickitafterwhichyou will see the following screen \u2013 Thistaballowsustoconfigure,createanddeployanagentononeofour \u201cvictim\u201d boxes that will communicate back to our Caldera server where we can run our operations from \u2013 Beforewecreateouragentletsexploresomeoftheupfront configuration options we have available \u2013 Thefirstoptionisthebeacontimer \u2013 Beacontimerallowyouspecifyhowlongyouragentwillwaittocheckin and send back data. By default these values, as you will see, are set to 30 and 60 which is fine. You may want to change these values if you are emulating a specific adversary or just trying to remain undetected from any network hunting the defender would be doing. \u2013 Thesecondoptionisthewatchdogtimer \u2013 Watchdogtimerletsyousetthenumberofsecondstowait,oncethe server is unreachable, before killing an agent. \u2013 Thethirdoptionistheuntrustedtimer \u2013 Untrustedtimersetsthenumberofsecondstowaitbeforemarkinga missing agent as untrusted. \u2013 Thefourthoptionistheimplantname \u2013 Thebasenameofnewly-spawnedagents.Ifnecessary,anextensionwill be added when an agent is created (ex: splunkd will become splunkd.exe when spawning an agent on a Windows machine). \u2013 Thefinaloptionavailabletousisthebootstrapability \u2013 Bootstrapabilityisacomma-separatedlistofabilityIDstoberunona new agent beacon. By default, this is set to run a command which clears command history. \u2013 Alrightnowthatweunderstandtheavailableconfigurationoptionslets go ahead and generate a new agent for us to deploy to our windows10 box \u2013 Wearegoingtousethedefaultvaluesforthistestsogoaheadand choose \u201cclick here to deploy an agent\u201d button and you will see the following option \u2013 Ifyouclickthedropdownfor\u201cChooseanagent\u201dyouwillseeanumberof options \u2013 Asyoucanseeeachoftheseagentsprovidesabriefdescription \u2013 TheonlytwoIhaveutilizedandtestedarethe54ndc47andManxagents \u2013 Forgeneralpurposesandeverydayuseyouwillusethe54ndc47agent as it was developed directly for use with Caldera \u2013 Choosethe54ndc47agentandselectthe\u201cAllplatforms\u201ddropdownto choose your OS \u2013 Forthislabwewillchoosewindowsforourwindows10host \u2013 Fortheapp.contact.httpfieldyouwillsupplytheiporurlofyourCaldera server which in our case is 192.168.33.10:8888 \u2013 YouanseeCalderageneratesaPowershellcommandtodownloadand execute the Caldera GoLang agent on your windows10 host \u2013 Nowcopythatcommandinfullandletsgoovertoourwindows10RDP session \u2013 OpenaPowershellpromptasadministrator powershell \u2013 NowpasteyourCalderaagentPowershellone-linerandhitenterto download and execute the agent \u2013 OncethisisdonewecangobacktoourCalderaserverGUI \u2013 Clickthexinthetoprightcorneroftheagentselectionboxyouwerein and you should now see an agent has checked into the Caldera server \u2013 Beforewemoveontoemulatingadversaryactivityletsexploresomeof the information the agent provides us \u2013 Asyoucanseeifgivesauniqueagentid,thehost,protocol,agent \u2013 process id and if the agent is running in a privileged context or not \u2013 Butifweclickonthegreenprocessidwecanseealotmoredetailtous \u2013 Asyoucannowseewehaveamuchmoredetailedviewofouragentto include parent process id, location of our executable and the user we are running as \u2013 Wealsoaregiventheabilitytoeditcertainfieldsdenotedby*andkill our agent \u2013 Nowclickthexinthetoprighttoleavethisview","title":"Agents"},{"location":"toolset/caldera-usage/#adversaries","text":"\u2013 Selectthehamburgermenuinthetopleftofyourscreenandselectthe adversaries tab which will open and drop you down to the following screen \u2013 Asyoucanseetheadversariestaballowsustocreateourowncustom profile (adversary) or view the profiles already created within Caldera \u2013 Letstakealookatapre-madeadversaryprofilesowecanexplorewhat makes up a profile \u2013 Clickthe\u201cSelectanexistingprofile\u201ddropdownandselecttheEnumerator profile \u2013 Enumeratoristhenameoftheprofile \u2013 EnumerateProcessesinallthewaysisadescriptionoftheprofile \u2013 BeneathorderingyoucanseethechooseTTPsandinwhatorderthey are to be executed \u2013 Thesearethebasicbuildingblocksofanadversary \u2013 LetlookatwhatoneoftheseTTPslooklikeupclose \u2013 ClickontheWMICProcessEnumerationblockandyoushouldseethe following screen \u2013 HerewecanseeeverythingaboutthisspecificTTP.Youseeitsuniqueid, name, description, tactic, technique id and technique name. \u2013 Belowthegenericinformationyoucanseewhatplatformitiscompatible with and what is being utilized to execute this technique \u2013 Scrolldownfurtherandyouwillseethecommandthatisbeingexecuted along with a cleanup command if one exists and the timeout value for the command \u2013 Nowclickthexinthetoprightcornerofthescreenandwewillcreate our own profile we will execute on our \u201cvictim\u201d \u2013 Underprofileschangethesliderfromviewtoadd \u2013 I\u2019mgoingtousetheprofilenameofTestbutyoucanusewhatevername you please \u2013 NextIwillfilloutagooddescriptionformyprofilewhichforthiswillbe\u201cA set of TTPs for displaying Caldera\u2019s functionality\u201d \u2013 Nowletsaddsomeabilitiestoourprofile \u2013 Clickthe+addabilityselectorontherightsideofyourscreenwhichwill pop up a familiar menu \u2013 LetsselectaTTP \u2013 Iwillselectthediscoverytactic,T1007SystemServiceDiscoveryand Discover System Services ability \u2013 IfyouscrolldownyouwillseethecommandbeingrunisthePowershell cmdlet Get-Service executed by Powershell as evidenced by the psh executor \u2013 Nowletsclickthegreenaddtoadversarybuttoninthebottomleftofthe screen to add this TTP to our profile \u2013 AsyouseewenowhaveaddedthisTTPasthefirststepinourattack \u2013 I\u2019veaddedasecondattackabilityandyoucanaddasmanyasyouwish but for my purposes here this will be fine \u2013 Letssavethisprofileandmoveontoexecutingitwithouragentonthe windows10 box \u2013 OncesavedyouwillseeAdversarySaved!atthebottomofyourscreen adversary saved!","title":"Adversaries"},{"location":"toolset/caldera-usage/#operations","text":"\u2013 ScrollupandclickthehamburgermenuinthetopleftoftheCaldera interface and select the Operations tab to display the following screen IMG \u2013 Therearecurrentlynooperationscreatedsoclickingthe\u201cOperations\u201d dropdown will not display anything which is why we are going to create our own operation \u2013 Clicktheslidertochangeitfromviewtoadd \u2013 Thisallowsyoutospecifyanumberofoptionsinordertoconfigureyour operation successfully IMG \u2013 IwillnameourOperationTestbutagainyoucannameitwhateveryou want \u2013 ClickBasicOptionsandwewilldiscusswhatitprovidesus IMG \u2013 Thefirstdropdownsetsyourgroupandbydefaultallagentsareadded to the \u201cred\u201d group which is what I have selected \u2013 Theseconddropdownsetstheprofileyouwouldlikethisoperationto run. I have selected the Test profile I created earlier \u2013 Thethirddropdownsetstheoptiontoclosethisoperationorleaveit open for future execution. I have set this to auto close since this is a lab \u2013 Thelastdropdownsetstheoperationtorunimmediatelyafterstartingor pausing for you to inspect it. I have set it run immediately \u2013 NowclickBasicOptionstocloseitandclickAutonomous IMG \u2013 Thefirstdropdownsetstheoperationtorunautonomouslyormanually with approval of each TTP executed \u2013 Theseconddropdownsetswhichplanneryouwillutilizetoexecutethe operation. A planner is a module within CALDERA which contains logic for \u2013 how a running operation should make decisions about which abilities to use and in what order \u2013 Thefinaldropdownsetsthefactsyouwilluseduringtheoperation.A fact is an identifiable piece of information about a given computer. Facts are directly related to variables, which can be used inside abilities \u2013 NowclickAutonomoustocloseitandclickonStealth IMG \u2013 Theonlydropdownhereallowsforyoutoselectanumberofobfuscation techniques to obscure the commands you run on the host system \u2013 Thesecondfieldsetsthejittervalue.Agentsnormallycheckinwith CALDERA every 60 seconds. Once they realize they are part of an active operation, agents will start checking in according to the jitter time, which is by default 2/8. This fraction tells the agents that they should pause between 2 and 8 seconds (picked at random each time an agent checks in) before using the next ability \u2013 Thevisibilitysliderletsyousethowstealthyyouroperationwillremain. How visible should the operation be to the defense. Defaults to 51 because each ability defaults to a visibility of 50. Abilities with a higher visibility than the operation visibility will be skipped \u2013 ClickStealthtocloseit \u2013 Don\u2019tclickSchedule.Scheduleallowsyouschedulethisoperationfora later date which we will not be doing \u2013 Nowclickstarttobeginyouroperationandselectincludeagentoutput IMG \u2013 ThereisalotherebutIthinkmuchofitisselfexplanatory \u2013 Thefirstareatonoteistheabilityatthetopofthescreentostop,pause, play, and skip the operation \u2013 Thenexttotheseoptionsistheabilityatanytimetoswitchyour operation from a autonomous operation to a manual one \u2013 NowwecanseethatourDiscoverSystemServicesabilitywasexecuted on the host and since we enabled the inclusion of agent output if we can \u2013 click the star at the end of the ability line we should be able to see the output from the command IMG \u2013 Clickthexinthetoprightcornertoreturntotheoperationscreen \u2013 Congratulations!!Youhavesuccessfullydeployedanagent,createdan adversary profile, created an operation and run that profile against a host. \u2013 Nowletscleanup","title":"Operations"},{"location":"toolset/caldera-usage/#clean-up","text":"\u2013 Nownormallyyoumightwanttosavealloperationsandprofilesyou create but in this instance I figure I\u2019d show you how to get rid of them so you can start fresh \u2013 Firstwewilldeletethisoperation.Goaheadandclickthegreendelete button located under download report which will revert your screen back to the original operations screen \u2013 Nextlickthexinthetopleftcorneroftheoperationstabtoremoveit from your interface \u2013 Youshouldnowbeontheprofilestabwhichyoucandothesamething in. Click the green delete profile button, click ok and then the red x in the \u2013 top left hand corner \u2013 Nowforthefinalpieceletskillouragentandremoveitfromtheagents tab \u2013 ClickthegreenagentPIDandselectkillagentthenselectok \u2013 WaitfortheagentPIDtoturnredorrefreshtheCalderabrowsertaband go back to the agents tab. This may take a minute or two depending on the agents configuration \u2013 Oncetheagentshowsasterminatedclicktheredxattheendofitto remove it from your view and you are all cleaned up....aside from one thing. The windows box. \u2013 Ifyouwanttoensureacleanwindowsboxyoucanusethestationctl management menu to perform a soft reset and revert the windows box back to a clean instance taken upon deployment","title":"Clean Up"},{"location":"toolset/caldera-usage/#thrunting","text":"\u2013 Now lets switch overtoourKibanabrowsertabandgointotheDiscover tab within Kibana selecting the logs-* index IMG \u2013 The best way to view the activity we conducted on our host is to filter down the data to just want we want to see in this case I want to see process creation events and I want to display the user, parent process name, executing process name and command line. \u2013 Since the agent we used was named \"Splunkd\", filtering down the wanted activity will be easy. IMG Let's explain what's been done here: I've filtered the data set using the winlog channel field which contains the different event subscriptions we have available to us. Since we want a specific windows event ID, I chose the Security channel. \u2013 I then wanted to specify the process creation event id of 4688, which I did by utilizing the event.code field. \u2013 Lastly, I knew the name of my implant was Splunkd so I filtered on the parent process name field to specify the Splunkd process name \u2013 To view the specific fields I wanted to see, I can simply search for the field names on the left hand side and added them to my table \u2013 As you can see, we have this Splunkd.exe spawning Powershell.exe as the user vagrant on the windows10 host to run the Get-Service command \u2013 There are a number of different detections we could write for this, but that is a lab for another day. Hopefully this lab helped you gain a basic understand of Caldera, how a C2 framework works and how to hunt the activity Caldera conducts using Kibana.","title":"Thrunting"}]}