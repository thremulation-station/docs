{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome Thanks for visting the techincal documentation for the Thremulation Station project! What is Thremulation Station? Thremulation Station is an approachable and small-scale threat emulation and detection range. It primarily uses Elastic Security and Atomic Redteam to emulate and detect adversary activity. The project is a collection of existing tools like VirtualBox and Vagrant an to deploy a local testing environment that requires only a reasonably spec'd machine. The bottom line: Cyber Threat Detection for your laptop . Contribution How can I help? We welcome contributions! Check out the Contribution Section on how to help with both the core project and documentation. If you're lost, please ask and we can help guide you to the right place to get started. Credit Tools used and projects of inspiration etc. Elastic Atomic Redpeople Mitre Att&ck RockNSM Robox ... TODO","title":"Welcome"},{"location":"#welcome","text":"Thanks for visting the techincal documentation for the Thremulation Station project!","title":"Welcome"},{"location":"#what-is-thremulation-station","text":"Thremulation Station is an approachable and small-scale threat emulation and detection range. It primarily uses Elastic Security and Atomic Redteam to emulate and detect adversary activity. The project is a collection of existing tools like VirtualBox and Vagrant an to deploy a local testing environment that requires only a reasonably spec'd machine. The bottom line: Cyber Threat Detection for your laptop .","title":"What is Thremulation Station?"},{"location":"#contribution","text":"How can I help? We welcome contributions! Check out the Contribution Section on how to help with both the core project and documentation. If you're lost, please ask and we can help guide you to the right place to get started.","title":"Contribution"},{"location":"#credit","text":"Tools used and projects of inspiration etc. Elastic Atomic Redpeople Mitre Att&ck RockNSM Robox ... TODO","title":"Credit"},{"location":"contribution/","text":"Community Contribution This document aims to provides instructions to set up, develop, and submit updates and features for this project. Here is a high level overview of the process: fork the project clone to your local machine setup local environment with docker use the local container to update documentation Github Issue Please create an Issue the proper repository: Project documentation Code/additions/anything else Community Please join the Discord . Email If all else fails, please feel free to send us an email --> contact [at] thremulation [dot] io . Install Requirements This section assumes that you are using macOS. Use the brew package manager where noted below (and generally whenever possible). Install Git: $ brew install git instructions for installing brew can be found here ADD Git the Things Clone the repo locally by copy / pasting the full command by clicking the \"Clone\" in the top right corner of the web UI: $ # example command: git clone <CLONE_URL> Change directory into the project folder: $ cd thremulation-station Create an new branch (alternate timeline) for later pull request / merging operations: $ git branch <BRANCH_NAME> Jump into your new personal branch: $ git checkout <BRANCH_NAME> Content Development TODO Submitting Changes After the above workflow is complete, it's time to submit your work for approval: With all your work committed, push your changes up to your project fork: $ git push Use the Github graphical interface to submit an official Pull Request to merge in all your changes.","title":"Contribution"},{"location":"contribution/#community-contribution","text":"This document aims to provides instructions to set up, develop, and submit updates and features for this project. Here is a high level overview of the process: fork the project clone to your local machine setup local environment with docker use the local container to update documentation","title":"Community Contribution"},{"location":"contribution/#github-issue","text":"Please create an Issue the proper repository: Project documentation Code/additions/anything else","title":"Github Issue"},{"location":"contribution/#community","text":"Please join the Discord .","title":"Community"},{"location":"contribution/#email","text":"If all else fails, please feel free to send us an email --> contact [at] thremulation [dot] io .","title":"Email"},{"location":"contribution/#install-requirements","text":"This section assumes that you are using macOS. Use the brew package manager where noted below (and generally whenever possible). Install Git: $ brew install git instructions for installing brew can be found here ADD","title":"Install Requirements"},{"location":"contribution/#git-the-things","text":"Clone the repo locally by copy / pasting the full command by clicking the \"Clone\" in the top right corner of the web UI: $ # example command: git clone <CLONE_URL> Change directory into the project folder: $ cd thremulation-station Create an new branch (alternate timeline) for later pull request / merging operations: $ git branch <BRANCH_NAME> Jump into your new personal branch: $ git checkout <BRANCH_NAME>","title":"Git the Things"},{"location":"contribution/#content-development","text":"TODO","title":"Content Development"},{"location":"contribution/#submitting-changes","text":"After the above workflow is complete, it's time to submit your work for approval: With all your work committed, push your changes up to your project fork: $ git push Use the Github graphical interface to submit an official Pull Request to merge in all your changes.","title":"Submitting Changes"},{"location":"getting-started/demo-threat/","text":"Demonstration Threat Now that all VMs are up and running, let's validate that everything is working as it should. Let's get ready to rumble! Functions Check This functions check will demonstrate a general workflow using some of the major tools available, as well as validate that all nodes are communicating corectly. From your terminal run $ vagrant ssh ts.elastomic to establish as shell session on the combo logger / attacker box. Your prompt will update to indicate you're connected to the elastomic box. Then, enter pwsh to drop into a Powershell session. Now it is time to choose what test or attack you would like to run against the remote Windows 10 box. You'll see your prompt change to PS /home/vagrant> . You can browse the available tests by referencing the Atomic Redteam Docs . For this demonstration we will conduct a simple example technique and test. It will use Powershell to download Mimikatz and then dump credentials on the system. More info about this specific technique and test can be found here: T1059.001 TestNumber 1 Before we can run this test against the Windows 10 box we first need to setup a Powershell Session over SSH to the Windows 10 box. Create a necessary variable by running the below command. Enter \"yes\" and the password vagrant if prompted: $sess = New-PSSession -Hostname 192 . 168 . 33 . 11 -Username vagrant Info What does this do? We are creating a variable called $sess and setting it's value to our new session we just created using the New-PSSession Powershell cmdlet. Take a moment to look at the syntax we're going to use to launch our \"attack\" against the remmote target ( ts.windows10 ): Invoke-AtomicTest # Run Atomic Test T1059 . 001 # Technique ID -TestNumbers 1 # TestNumber -Session $sess # Connect using our session variable Run the following command to kick things off: Invoke-AtomicTest T1059 . 001 -TestNumbers 1 -Session $sess Once this is finished, go back to the Discover tab in Kibana: http://localhost:5601/app/discover#/ In the search bar type \" mimikatz \" and hit Enter. You should see results filtered to show the events matching the Mimikatz attack you just executed. Tip Your simple KQL query for \"Mimikatz\" is case-insensitive, but ensure that your timepicker is set to something sensible like \"Today\" or \"Last 15 minutes\". Kibana is (rightfully) very picky about time. Reset Button Clean logs -- clean mind right? While the data in Kibana is separated by the fact that it's time-series data, it can be helpful to clear previous attacks and leftover artifacts, especially in an education setting. Let's talk about how to hit the reset button. Target Systems Info The term \"target systems\" refers to the ts.windows10 and ts.centos7 boxes. Most of (if not all) Atomic Red Team tests come with a cleanup command to clear your target system before executing another test. In order to cleanup our Mimikatz test we can run the same command we used to execute it this time with a -Cleanup option at the end. Run the following command to clean house: Invoke-AtomicTest T1059 . 001 -TestNumbers 1 -Session $sess -Cleanup Attacker / Logger System The \"control\" node that is used to perform all attacking and logging operations is the ts.elatomic box. We can use the stationctl CLI to perform a data reset. This will clear all existing Elasticsearch index data to wipe the slate clean. Station control should be executed from the vagrant/ folder, so ensure that you're in the right folder: <THIS-PROJECT-REPO>/vagrant/ . You can perform a \"Clear Data\" operation with the following commands: Start CLI: $ ./stationctl Enter option #4: Management: tune and troubleshoot Enter option #6: Clear Data: delete data in all indexes Next Steps Now that we've passed the functions check and you're able to dig into all of the events, you can jump right into building detections based off of the logs produced using Thremulation Station. You can then run the test again to verify your detection logic is sound. As for next immediate steps, you have a few options: Toolset Section If you'd like to dig deeper into all the tools that have been made available in Thremulation Station, head over to the Toolset section in the top navigation bar. There you will find details and user walkthroughs on some of the most important tools in the belt. Hunting Handbook If you're ready to embark on a start-from-nothing guided journey on how to learn host-based threat hunting, check out the Hunting Handbook . While it's primary focus is to ramp new analysts and learners, there are plenty of great information useful to everyone. Lone Wolf If you already know what you're doing, and know what you want TS to do for you, help us by doing great things and contributing to the project ! Conclusion Regardless of the path you choos, congrats! You executed your first test and hopefully took some notes on how the project works.","title":"Demo Threat"},{"location":"getting-started/demo-threat/#demonstration-threat","text":"Now that all VMs are up and running, let's validate that everything is working as it should. Let's get ready to rumble!","title":"Demonstration Threat"},{"location":"getting-started/demo-threat/#functions-check","text":"This functions check will demonstrate a general workflow using some of the major tools available, as well as validate that all nodes are communicating corectly. From your terminal run $ vagrant ssh ts.elastomic to establish as shell session on the combo logger / attacker box. Your prompt will update to indicate you're connected to the elastomic box. Then, enter pwsh to drop into a Powershell session. Now it is time to choose what test or attack you would like to run against the remote Windows 10 box. You'll see your prompt change to PS /home/vagrant> . You can browse the available tests by referencing the Atomic Redteam Docs . For this demonstration we will conduct a simple example technique and test. It will use Powershell to download Mimikatz and then dump credentials on the system. More info about this specific technique and test can be found here: T1059.001 TestNumber 1 Before we can run this test against the Windows 10 box we first need to setup a Powershell Session over SSH to the Windows 10 box. Create a necessary variable by running the below command. Enter \"yes\" and the password vagrant if prompted: $sess = New-PSSession -Hostname 192 . 168 . 33 . 11 -Username vagrant Info What does this do? We are creating a variable called $sess and setting it's value to our new session we just created using the New-PSSession Powershell cmdlet. Take a moment to look at the syntax we're going to use to launch our \"attack\" against the remmote target ( ts.windows10 ): Invoke-AtomicTest # Run Atomic Test T1059 . 001 # Technique ID -TestNumbers 1 # TestNumber -Session $sess # Connect using our session variable Run the following command to kick things off: Invoke-AtomicTest T1059 . 001 -TestNumbers 1 -Session $sess Once this is finished, go back to the Discover tab in Kibana: http://localhost:5601/app/discover#/ In the search bar type \" mimikatz \" and hit Enter. You should see results filtered to show the events matching the Mimikatz attack you just executed. Tip Your simple KQL query for \"Mimikatz\" is case-insensitive, but ensure that your timepicker is set to something sensible like \"Today\" or \"Last 15 minutes\". Kibana is (rightfully) very picky about time.","title":"Functions Check"},{"location":"getting-started/demo-threat/#reset-button","text":"Clean logs -- clean mind right? While the data in Kibana is separated by the fact that it's time-series data, it can be helpful to clear previous attacks and leftover artifacts, especially in an education setting. Let's talk about how to hit the reset button.","title":"Reset Button"},{"location":"getting-started/demo-threat/#target-systems","text":"Info The term \"target systems\" refers to the ts.windows10 and ts.centos7 boxes. Most of (if not all) Atomic Red Team tests come with a cleanup command to clear your target system before executing another test. In order to cleanup our Mimikatz test we can run the same command we used to execute it this time with a -Cleanup option at the end. Run the following command to clean house: Invoke-AtomicTest T1059 . 001 -TestNumbers 1 -Session $sess -Cleanup","title":"Target Systems"},{"location":"getting-started/demo-threat/#attacker-logger-system","text":"The \"control\" node that is used to perform all attacking and logging operations is the ts.elatomic box. We can use the stationctl CLI to perform a data reset. This will clear all existing Elasticsearch index data to wipe the slate clean. Station control should be executed from the vagrant/ folder, so ensure that you're in the right folder: <THIS-PROJECT-REPO>/vagrant/ . You can perform a \"Clear Data\" operation with the following commands: Start CLI: $ ./stationctl Enter option #4: Management: tune and troubleshoot Enter option #6: Clear Data: delete data in all indexes","title":"Attacker / Logger System"},{"location":"getting-started/demo-threat/#next-steps","text":"Now that we've passed the functions check and you're able to dig into all of the events, you can jump right into building detections based off of the logs produced using Thremulation Station. You can then run the test again to verify your detection logic is sound. As for next immediate steps, you have a few options:","title":"Next Steps"},{"location":"getting-started/demo-threat/#toolset-section","text":"If you'd like to dig deeper into all the tools that have been made available in Thremulation Station, head over to the Toolset section in the top navigation bar. There you will find details and user walkthroughs on some of the most important tools in the belt.","title":"Toolset Section"},{"location":"getting-started/demo-threat/#hunting-handbook","text":"If you're ready to embark on a start-from-nothing guided journey on how to learn host-based threat hunting, check out the Hunting Handbook . While it's primary focus is to ramp new analysts and learners, there are plenty of great information useful to everyone.","title":"Hunting Handbook"},{"location":"getting-started/demo-threat/#lone-wolf","text":"If you already know what you're doing, and know what you want TS to do for you, help us by doing great things and contributing to the project !","title":"Lone Wolf"},{"location":"getting-started/demo-threat/#conclusion","text":"Regardless of the path you choos, congrats! You executed your first test and hopefully took some notes on how the project works.","title":"Conclusion"},{"location":"getting-started/deployment/","text":"Deployment Once you have all the requirements installed and repo staged locally, it's time to deploy your threat hunting range. Introduction to Station Control Thremulation Station comes with a terminal control interface called stationctl . It is used to perform most major tasks within the environment. The main features provided are: stationctl is a script located in the vagrant/ directory, and must be executed from that folder to work properly TODO IMG configure and deploy a new local range check the status of a current range management tasks on a current range reloading / rebuilding boxes data reset (clearing indexes) various troubleshooting steps Let's continue setting up a local testing range by moving into the deployment steps. Deployment Options In the previous section you installed requirements and cloned the repo locally. Let's get this thing going! Move into this repo's vagrant directory. Example: cd thremulation-station/vagrant Run the stationctl control script. Example: $ ./stationctl Select option 1 and <enter> to move into the deploy menu Here you can see the main menu and it's options. From here, you have 2 paths you can take... Quick Deployment A Quick Deployment is the first and fastest option. It enables all VMs included in the range, meaning the control machine and both a windows and linux target box. Select option 1 and <enter> Then confirm this configuration to kick things off. This will download boxes / spin up / provision all boxes. Get yourself some fresh coffee, this will take 10-20 min depending on your connection. Note: This is a bandwidth-intensive task that may take a while. But take heart, this will only happen the first time you deploy. Get some coffee, and drink you cup slowly, savoring these infrequently quiet moments. Note: Note: If you don't drink coffee, I don't trust you and I don't want you to have any part of this. Custom Deployment TODO","title":"Deployment"},{"location":"getting-started/deployment/#deployment","text":"Once you have all the requirements installed and repo staged locally, it's time to deploy your threat hunting range.","title":"Deployment"},{"location":"getting-started/deployment/#introduction-to-station-control","text":"Thremulation Station comes with a terminal control interface called stationctl . It is used to perform most major tasks within the environment. The main features provided are: stationctl is a script located in the vagrant/ directory, and must be executed from that folder to work properly TODO IMG configure and deploy a new local range check the status of a current range management tasks on a current range reloading / rebuilding boxes data reset (clearing indexes) various troubleshooting steps Let's continue setting up a local testing range by moving into the deployment steps.","title":"Introduction to Station Control"},{"location":"getting-started/deployment/#deployment-options","text":"In the previous section you installed requirements and cloned the repo locally. Let's get this thing going! Move into this repo's vagrant directory. Example: cd thremulation-station/vagrant Run the stationctl control script. Example: $ ./stationctl Select option 1 and <enter> to move into the deploy menu Here you can see the main menu and it's options. From here, you have 2 paths you can take...","title":"Deployment Options"},{"location":"getting-started/deployment/#quick-deployment","text":"A Quick Deployment is the first and fastest option. It enables all VMs included in the range, meaning the control machine and both a windows and linux target box. Select option 1 and <enter> Then confirm this configuration to kick things off. This will download boxes / spin up / provision all boxes. Get yourself some fresh coffee, this will take 10-20 min depending on your connection. Note: This is a bandwidth-intensive task that may take a while. But take heart, this will only happen the first time you deploy. Get some coffee, and drink you cup slowly, savoring these infrequently quiet moments. Note: Note: If you don't drink coffee, I don't trust you and I don't want you to have any part of this.","title":"Quick Deployment"},{"location":"getting-started/deployment/#custom-deployment","text":"TODO","title":"Custom Deployment"},{"location":"getting-started/initial-access/","text":"Initial Access Now it's time to really get into things. Getting Status Now that we've deployed, let's make sure everything is up and running. So, fire stationctl back up and let's do that. sh stationctl , select 2. Status . This will run through a check of the Vagrant boxes, VirtualBox machines, and the status of Elasticsearch and Kibana. Of note, because Elasticsearch is only a single node installation, the status will always be Yellow. Everything is fine. Interface Login The environment is designed for users to interact with 2 primary interfaces: Atomic Redteam - Execute Threats This adversary emulation toolset is accessed by sshing into the \"elastic\" box and starting a powershell session. From the $(pwd)/vagrant directory, ssh to the elastic vbox: $ vagrant ssh ts.elastomic start a powershell session $ pwsh View the usage guide to learn more about executing Atomic Red Team. Kibana WebUI - Detect Threats To reach Kibana browse to localhost:5601 Kibana Credentials user: vagrant pass: vagrant Once in Kibana click the 3 hash dropdown menu in the upper left corner of the UI and select the \"Discover\" tab. Ensure that the timepicker is set to the most recent timeframe, example \"Last 24 hours\".","title":"Initial Access"},{"location":"getting-started/initial-access/#initial-access","text":"Now it's time to really get into things.","title":"Initial Access"},{"location":"getting-started/initial-access/#getting-status","text":"Now that we've deployed, let's make sure everything is up and running. So, fire stationctl back up and let's do that. sh stationctl , select 2. Status . This will run through a check of the Vagrant boxes, VirtualBox machines, and the status of Elasticsearch and Kibana. Of note, because Elasticsearch is only a single node installation, the status will always be Yellow. Everything is fine.","title":"Getting Status"},{"location":"getting-started/initial-access/#interface-login","text":"The environment is designed for users to interact with 2 primary interfaces: Atomic Redteam - Execute Threats This adversary emulation toolset is accessed by sshing into the \"elastic\" box and starting a powershell session. From the $(pwd)/vagrant directory, ssh to the elastic vbox: $ vagrant ssh ts.elastomic start a powershell session $ pwsh View the usage guide to learn more about executing Atomic Red Team. Kibana WebUI - Detect Threats To reach Kibana browse to localhost:5601 Kibana Credentials user: vagrant pass: vagrant Once in Kibana click the 3 hash dropdown menu in the upper left corner of the UI and select the \"Discover\" tab. Ensure that the timepicker is set to the most recent timeframe, example \"Last 24 hours\".","title":"Interface Login"},{"location":"getting-started/installation/","text":"Installation A simple user experience is the priority. A brief overview of setup is this: Clone the project Use the CLI to deploy your range Reference the User Guide at thremulation.io Use the CLI to perform cleanup / reset tasks Getting Requirements Following the installation steps for your host platform. If you don't see your OS flavor, consider contributing . macOS Install the Homebrew package manager Update brew: brew update Install remaining requirements. You can copy / paste the following into your terminal: brew install --cask virtualbox vagrant brew install git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Windows10 If you're on a Windows box, we recommend using Chocolatey for package management. Install remaining requirements. You can copy / paste the following into your terminal: choco install virtualbox vagrant choco install git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Note: Vagrant requires a restart as part of the installation. Linux (RHEL) This section assumes that you're using a RHEL-based distro, preferrably Centos 7. All commands assume a root shell ( sudo -s ). Install requirements yum groupinstall -y \"Development Tools\" yum install -y \\ kernel-devel \\ kernel-devel-3.10.0-1127.el7.x86_64 \\ epel-release \\ yum install -y git Install VirtualBox a. curl -o /etc/yum.repos.d/virtualbox.repo http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo b. rpm --import https://www.virtualbox.org/download/oracle_vbox.asc c. yum install -y VirtualBox-6.0 Install Vagrant a. yum install -y https://releases.hashicorp.com/vagrant/2.2.10/vagrant_2.2.10_x86_64.rpm b. vagrant plugin install vagrant-disksize c. vagrant plugin install vagrant-vbguest Getting the Project Now that you have git installed, you can clone the project locally: $ git clone https://github.com/thremulation-station/thremulation-station.git","title":"Installation"},{"location":"getting-started/installation/#installation","text":"A simple user experience is the priority. A brief overview of setup is this: Clone the project Use the CLI to deploy your range Reference the User Guide at thremulation.io Use the CLI to perform cleanup / reset tasks","title":"Installation"},{"location":"getting-started/installation/#getting-requirements","text":"Following the installation steps for your host platform. If you don't see your OS flavor, consider contributing . macOS Install the Homebrew package manager Update brew: brew update Install remaining requirements. You can copy / paste the following into your terminal: brew install --cask virtualbox vagrant brew install git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Windows10 If you're on a Windows box, we recommend using Chocolatey for package management. Install remaining requirements. You can copy / paste the following into your terminal: choco install virtualbox vagrant choco install git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Note: Vagrant requires a restart as part of the installation. Linux (RHEL) This section assumes that you're using a RHEL-based distro, preferrably Centos 7. All commands assume a root shell ( sudo -s ). Install requirements yum groupinstall -y \"Development Tools\" yum install -y \\ kernel-devel \\ kernel-devel-3.10.0-1127.el7.x86_64 \\ epel-release \\ yum install -y git Install VirtualBox a. curl -o /etc/yum.repos.d/virtualbox.repo http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo b. rpm --import https://www.virtualbox.org/download/oracle_vbox.asc c. yum install -y VirtualBox-6.0 Install Vagrant a. yum install -y https://releases.hashicorp.com/vagrant/2.2.10/vagrant_2.2.10_x86_64.rpm b. vagrant plugin install vagrant-disksize c. vagrant plugin install vagrant-vbguest","title":"Getting Requirements"},{"location":"getting-started/installation/#getting-the-project","text":"Now that you have git installed, you can clone the project locally: $ git clone https://github.com/thremulation-station/thremulation-station.git","title":"Getting the Project"},{"location":"handbook/build-your-base/","text":"Build Your Base","title":"Build Your Base"},{"location":"handbook/build-your-base/#build-your-base","text":"","title":"Build Your Base"},{"location":"handbook/developing-methodology/","text":"Developing a Hunt Methodology","title":"Developing a Methodology"},{"location":"handbook/developing-methodology/#developing-a-hunt-methodology","text":"","title":"Developing a Hunt Methodology"},{"location":"handbook/lab1/","text":"","title":"Lab 1 - Subtitle"},{"location":"handbook/lab2/","text":"","title":"Lab 2 - Subtitle"},{"location":"handbook/lab3/","text":"","title":"Lab 3 - Subtitle"},{"location":"handbook/tools/","text":"Tools of the Trade","title":"Tools of the Trade"},{"location":"handbook/tools/#tools-of-the-trade","text":"","title":"Tools of the Trade"},{"location":"handbook/ts-walkthrough/","text":"","title":"Platform Walkthrough"},{"location":"handbook/understanding-adversary/","text":"Understanding the Adversary","title":"Understanding the Adversary"},{"location":"handbook/understanding-adversary/#understanding-the-adversary","text":"","title":"Understanding the Adversary"},{"location":"handbook/what-is-threathunting/","text":"Host Based Threat Hunting Handbook","title":"What is Threat Hunting?"},{"location":"handbook/what-is-threathunting/#host-based-threat-hunting-handbook","text":"","title":"Host Based Threat Hunting Handbook"},{"location":"handbook/whats-in-the-data/","text":"","title":"What's in the Data"},{"location":"handbook/writing-detections/","text":"Writing Resilient Detections in Kibana","title":"Writing Resilient Detections"},{"location":"handbook/writing-detections/#writing-resilient-detections-in-kibana","text":"","title":"Writing Resilient Detections in Kibana"},{"location":"home/about/","text":"About the Project TL;DR If you're ready to skip all this info and get things running, jump to installation . How is Thremulation-Station different? Not everyone has a blade server heating their home from a closet...and not everyone, be it a junior hunter/red teamer who is just getting started or an operator with 20 years experience, is an engineer that can stitch all of the complex services together to grow or sharpen your skills. Who is it for? This project has many practical use cases, and we're excited to see how it's used. A few examples: Cyber Defense education Generating training data Threat intelligence training Writing and validating detection rules Writing and testing threat tactics and techniques","title":"About TS"},{"location":"home/about/#about-the-project","text":"","title":"About the Project"},{"location":"home/about/#tldr","text":"If you're ready to skip all this info and get things running, jump to installation .","title":"TL;DR"},{"location":"home/about/#how-is-thremulation-station-different","text":"Not everyone has a blade server heating their home from a closet...and not everyone, be it a junior hunter/red teamer who is just getting started or an operator with 20 years experience, is an engineer that can stitch all of the complex services together to grow or sharpen your skills.","title":"How is Thremulation-Station different?"},{"location":"home/about/#who-is-it-for","text":"This project has many practical use cases, and we're excited to see how it's used. A few examples: Cyber Defense education Generating training data Threat intelligence training Writing and validating detection rules Writing and testing threat tactics and techniques","title":"Who is it for?"},{"location":"home/node-roles/","text":"Node Roles This section lists the building blocks of how each node is set up. Elastomic Purpose The \" elastomic \" node is the first and only required node, and is the crux of the entire project. It's essentially a \"Purple Teaming\" control box that is used to both execute attacks and capture logs of those attacks . Features Elasticsearch Kibana Atomic Redteam UI Powershell Running Services Elasticsearch Kibana Windows10 Workstation Purpose The Windows10 node acts as the primary target system to execute effects against, in order to generate security event data. Features Built from Windows 10 x64 Enterprise trial ISO WinRM Enable (unauthenticated mode, for Packer/Vagrant to use) One user vagrant All updates applied during build process Includes VM guest additions Turn on RDP Set the network type for the virtual adapter to 'Home' and not bug you about it Turns autologin off Running Services Elastic Agent Sysmon Centos Server Purpose The intent of the centos node is emulate hosting the typical services hosted on a small enterprise environment and provided another OS attack surface. Features Built from CentOS 7 ISO SELinux enforcing One user vagrant All updates applied during build process Includes VM guest additions Turns autologin off Running Services Auditbeat Auditd Filebeat Cockpit Nginx Rsyslog Samba More details on the usage of each tool can be found in the Toolset Section .","title":"Node Roles"},{"location":"home/node-roles/#node-roles","text":"This section lists the building blocks of how each node is set up.","title":"Node Roles"},{"location":"home/node-roles/#elastomic","text":"","title":"Elastomic"},{"location":"home/node-roles/#purpose","text":"The \" elastomic \" node is the first and only required node, and is the crux of the entire project. It's essentially a \"Purple Teaming\" control box that is used to both execute attacks and capture logs of those attacks .","title":"Purpose"},{"location":"home/node-roles/#features","text":"Elasticsearch Kibana Atomic Redteam UI Powershell","title":"Features"},{"location":"home/node-roles/#running-services","text":"Elasticsearch Kibana","title":"Running Services"},{"location":"home/node-roles/#windows10-workstation","text":"","title":"Windows10 Workstation"},{"location":"home/node-roles/#purpose_1","text":"The Windows10 node acts as the primary target system to execute effects against, in order to generate security event data.","title":"Purpose"},{"location":"home/node-roles/#features_1","text":"Built from Windows 10 x64 Enterprise trial ISO WinRM Enable (unauthenticated mode, for Packer/Vagrant to use) One user vagrant All updates applied during build process Includes VM guest additions Turn on RDP Set the network type for the virtual adapter to 'Home' and not bug you about it Turns autologin off","title":"Features"},{"location":"home/node-roles/#running-services_1","text":"Elastic Agent Sysmon","title":"Running Services"},{"location":"home/node-roles/#centos-server","text":"","title":"Centos Server"},{"location":"home/node-roles/#purpose_2","text":"The intent of the centos node is emulate hosting the typical services hosted on a small enterprise environment and provided another OS attack surface.","title":"Purpose"},{"location":"home/node-roles/#features_2","text":"Built from CentOS 7 ISO SELinux enforcing One user vagrant All updates applied during build process Includes VM guest additions Turns autologin off","title":"Features"},{"location":"home/node-roles/#running-services_2","text":"Auditbeat Auditd Filebeat Cockpit Nginx Rsyslog Samba More details on the usage of each tool can be found in the Toolset Section .","title":"Running Services"},{"location":"home/topology/","text":"Project Topology Let's look at an overview of the mini-range and demonstrate a basic exercise workflow. Component Overview There are three basic components: The Elastic Stack - for analyzing data Atomic Red - for generating adversary activity Victim machines - to be targeted by adversary activity Basic Workflow","title":"Topology"},{"location":"home/topology/#project-topology","text":"Let's look at an overview of the mini-range and demonstrate a basic exercise workflow.","title":"Project Topology"},{"location":"home/topology/#component-overview","text":"There are three basic components: The Elastic Stack - for analyzing data Atomic Red - for generating adversary activity Victim machines - to be targeted by adversary activity","title":"Component Overview"},{"location":"home/topology/#basic-workflow","text":"","title":"Basic Workflow"},{"location":"support/contact/","text":"Contact Github Issue Please create an Issue the proper repository: Project documentation Code/additions/anything else Community Please join the Discord . Email If all else fails, please feel free to send us an email --> contact [at] thremulation [dot] io .","title":"Contact"},{"location":"support/contact/#contact","text":"","title":"Contact"},{"location":"support/contact/#github-issue","text":"Please create an Issue the proper repository: Project documentation Code/additions/anything else","title":"Github Issue"},{"location":"support/contact/#community","text":"Please join the Discord .","title":"Community"},{"location":"support/contact/#email","text":"If all else fails, please feel free to send us an email --> contact [at] thremulation [dot] io .","title":"Email"},{"location":"support/glossary/","text":"Glossary definitions","title":"Glossary"},{"location":"support/glossary/#glossary","text":"definitions","title":"Glossary"},{"location":"support/manage/","text":"Management Features TODO See the Troubleshooting Section for more details on working out any issues you may experience. Shutdown A.K.A \"It's broken and I dont know what to fix\" Once you are done playing in your sandbox, you need to clean things up. If you are in the middle of something and want to continue later, invoke a vagrant suspend . Otherwise, if you are done for the day invoke a vagrant halt . Last but not least, if you have goofed up your install you can use vagrant reload . vagrant --help is your friend.","title":"Management"},{"location":"support/manage/#management-features","text":"TODO See the Troubleshooting Section for more details on working out any issues you may experience.","title":"Management Features"},{"location":"support/manage/#shutdown","text":"A.K.A \"It's broken and I dont know what to fix\" Once you are done playing in your sandbox, you need to clean things up. If you are in the middle of something and want to continue later, invoke a vagrant suspend . Otherwise, if you are done for the day invoke a vagrant halt . Last but not least, if you have goofed up your install you can use vagrant reload . vagrant --help is your friend.","title":"Shutdown"},{"location":"support/references/","text":"References Blue Team Elasticsearch Kibana Beats Agents Red Team Atomic Red Team Atomic Redteam Docs CALDERA TODO","title":"References"},{"location":"support/references/#references","text":"","title":"References"},{"location":"support/references/#blue-team","text":"Elasticsearch Kibana Beats Agents","title":"Blue Team"},{"location":"support/references/#red-team","text":"Atomic Red Team Atomic Redteam Docs CALDERA TODO","title":"Red Team"},{"location":"support/troubleshoot/","text":"Troubleshooting Guide Virtual Machines stationctl status stationctl this stationctl that stationctl more Blue Team Tooling TODO Red Team Tooling TODO","title":"Troubleshoot"},{"location":"support/troubleshoot/#troubleshooting-guide","text":"","title":"Troubleshooting Guide"},{"location":"support/troubleshoot/#virtual-machines","text":"stationctl status stationctl this stationctl that stationctl more","title":"Virtual Machines"},{"location":"support/troubleshoot/#blue-team-tooling","text":"TODO","title":"Blue Team Tooling"},{"location":"support/troubleshoot/#red-team-tooling","text":"TODO","title":"Red Team Tooling"},{"location":"toolset/","text":"Project Toolbox At the end of the day, this project builds some fantastic open source lego pieces together to solve a problem. Here's what is being leveraged to make locally served thremulation magic happen: Infrastructure VirtualBox This serves as the \"hypervisor\" that your virtual machines will be built on Vagrant (and assorted plugins) This is an automation and orchestration platform to build the VMs that will be used for the project Threat Emulation Threat Emulation (or red teaming) is an attack simulation designed to measure how well defenders can detect an attack from a real-life adversary. To put threat emulation in layman\u2019s terms, it\u2019s \u201cethical hacking\u201d \u2014 a way for teams to test how well defenders would fare in the face of a real attack. The premise of red teaming is comparable to the old sports saying, \"the best offense is a good defense.\" Red teaming helps defenders learn about new adversary techniques. To provide threat emulation, we have used Red Canary's open source project, Atomic Red Team and MITRE's CALDERA project. Atomic Red Atomic Red Team is a library of simple tests that every security team can execute to test their defenses. Tests are focused, have few dependencies, and are defined in a structured format that can be used by automation frameworks. Caldera CALDERA\u2122 is a cyber security framework designed to easily run autonomous breach-and-simulation exercises. It can also be used to run manual red-team engagements or automated incident response. Threat Logging & Detection Threat detection (or blue teaming) is the process of defending assets and infrastructure from adversaries. This is achieved through a combination of signature-based detections and also access to all available log data to find activity that does not trigger any known signatures. To provide logging and detection, we are using the Elastic Stack - Elasticsearch , Kibana , Beats , and Agents . Elasticsearch Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search, fine\u2011tuned relevancy, and powerful analytics that scale with ease. We store and organize our data here. Kibana Kibana is a free and open user interface that lets you visualize your Elasticsearch data and navigate the Elastic Stack. Do anything from tracking query load to understanding the way requests flow through your apps. We use Kibana to visualize our data Elastic Security Everything you love about the free and open Elastic Stack \u2014 geared toward security information and event management (SIEM). Leverage the speed, scale, and relevance of Elasticsearch for SIEM use cases to drive your security operations. We use the Elastic Security (SIEM) to organize all of our security relevant data. Elastic Agent The Elastic Agent is a wrapper for centralized management of endpoint collection. We use the Elastic Agent to collect endpoint logs. This replaces Elastic \"Beats\" (which are now folded into the Agent).","title":"Overview"},{"location":"toolset/#project-toolbox","text":"At the end of the day, this project builds some fantastic open source lego pieces together to solve a problem. Here's what is being leveraged to make locally served thremulation magic happen:","title":"Project Toolbox"},{"location":"toolset/#infrastructure","text":"VirtualBox This serves as the \"hypervisor\" that your virtual machines will be built on Vagrant (and assorted plugins) This is an automation and orchestration platform to build the VMs that will be used for the project","title":"Infrastructure"},{"location":"toolset/#threat-emulation","text":"Threat Emulation (or red teaming) is an attack simulation designed to measure how well defenders can detect an attack from a real-life adversary. To put threat emulation in layman\u2019s terms, it\u2019s \u201cethical hacking\u201d \u2014 a way for teams to test how well defenders would fare in the face of a real attack. The premise of red teaming is comparable to the old sports saying, \"the best offense is a good defense.\" Red teaming helps defenders learn about new adversary techniques. To provide threat emulation, we have used Red Canary's open source project, Atomic Red Team and MITRE's CALDERA project.","title":"Threat Emulation"},{"location":"toolset/#atomic-red","text":"Atomic Red Team is a library of simple tests that every security team can execute to test their defenses. Tests are focused, have few dependencies, and are defined in a structured format that can be used by automation frameworks.","title":"Atomic Red"},{"location":"toolset/#caldera","text":"CALDERA\u2122 is a cyber security framework designed to easily run autonomous breach-and-simulation exercises. It can also be used to run manual red-team engagements or automated incident response.","title":"Caldera"},{"location":"toolset/#threat-logging-detection","text":"Threat detection (or blue teaming) is the process of defending assets and infrastructure from adversaries. This is achieved through a combination of signature-based detections and also access to all available log data to find activity that does not trigger any known signatures. To provide logging and detection, we are using the Elastic Stack - Elasticsearch , Kibana , Beats , and Agents .","title":"Threat Logging &amp; Detection"},{"location":"toolset/#elasticsearch","text":"Elasticsearch is a distributed, RESTful search and analytics engine capable of addressing a growing number of use cases. As the heart of the Elastic Stack, it centrally stores your data for lightning fast search, fine\u2011tuned relevancy, and powerful analytics that scale with ease. We store and organize our data here.","title":"Elasticsearch"},{"location":"toolset/#kibana","text":"Kibana is a free and open user interface that lets you visualize your Elasticsearch data and navigate the Elastic Stack. Do anything from tracking query load to understanding the way requests flow through your apps. We use Kibana to visualize our data","title":"Kibana"},{"location":"toolset/#elastic-security","text":"Everything you love about the free and open Elastic Stack \u2014 geared toward security information and event management (SIEM). Leverage the speed, scale, and relevance of Elasticsearch for SIEM use cases to drive your security operations. We use the Elastic Security (SIEM) to organize all of our security relevant data.","title":"Elastic Security"},{"location":"toolset/#elastic-agent","text":"The Elastic Agent is a wrapper for centralized management of endpoint collection. We use the Elastic Agent to collect endpoint logs. This replaces Elastic \"Beats\" (which are now folded into the Agent).","title":"Elastic Agent"},{"location":"toolset/atomicredteam/","text":"atomicredteam","title":"Atomic Usage"},{"location":"toolset/atomicredteam/#atomicredteam","text":"","title":"atomicredteam"},{"location":"toolset/caldera-usage/","text":"Caldera Basic Usage Lab Goals At the end of this lab you will be able to: Startup the Caldera server Understand and use the Caldera interface Configure and deploy a Caldera agent to a \u201cvictim\u201d host 4. View and create adversary profiles Create and run an operation Hunt for operation activity in Kibana Pre-Reqs Let's get set up for this lab: Vagrant up the elastomic and windows10 box: vagrant up ts.elastomic ts.windows10 Establish an RDP session with the windows10 box with the RDPclient of your choice, with the following data: host:192.168.33.11 user:vagrant pass:vagrant Startup Caldera comes pre-installed on the elastomic host, and is located in the /home/vagrant directory. In order to utilize it you only need to start up the Caldera server, so let\u2019s do that. First ssh into the elastomic box with the following command: vagrant ssh ts.elastomic Once you are ssh\u2019d into elastomic, move into the Caldera directory: cd caldera Start up the Caldera server by running: python3 server.py \u2014 insecure The server startup will take at most 30 seconds, after which we can validate by pointing your local browser to http://localhost:8888 . You should see the following: Interface Now that we have our server running hosted locally, we can login and take a look around Default credentials for your Caldera server are: admin:admin After successfully logging in you should see the Caldera welcome page Click on the hamburger menu next to navigate in the top left corner to dis play the different options Caldera provides The primary menu options you will be concerned with are the Agents, Adversaries, and Operations sections. Agents We will start with the agents tab, so go ahead and click it This tab allows us to configure, create, and deploy an agent on one of our \u201cvictim\u201d boxes that will communicate back to our Caldera server where we can run our operations from. Before we create our agent, lets explore some of the up front configuration options we have available Beacon Timer Beacon timer allows you to specify how long your agent will wait to check in and send back data. By default, these values are set to 30 and 60 which is fine. You may want to change these if you are emulating a specific adversary, or just trying to remain undetected from any hunting the defender may be doing. Watchdog Timer Watchdog timer lets you set the number of seconds to wait once the server is unreachable, before killing an agent. Untrusted Timer Untrusted timer sets the number of seconds to wait before marking a missing agent as untrusted. Implant Name The base name of newly-spawned agents. If necessary, an extension will be added when an agent is created e.g splunkd will become splunkd.exe when spawning an agent on a Windows machine. Bootstrap Ability Bootstrap ability is a comma-separated list of ability IDs to be run on a new agent beacon. By default, this is set to run a command which clears command history. Now that we understand the available configuration options, lets go ahead and generate a new agent for us to deploy to our windows10 box We are going to use the default values for this test, so go ahead and choose \u201cclick here to deploy an agent\u201d button and you will see the following option If you click the dropdown for \u201cChoose an agent\u201d you will see anumber of options Each of these agents provide a brief description The only two I have tested are \"54ndc47\" and \"Manxagents\" For general purposes, use the 54ndc47 agent as it was developed directly for use with Caldera Choose the 54ndc47 agent and select the \u201cAllplatforms\u201d dropdown to choose your OS For this lab, we will choose windows for our windows10 host For the app.contact.http field, you will supply the ip or url of your Caldera server: 192.168.33.10:8888 Caldera generates a Powershell command to download and execute the Caldera GoLang agent on your windows10 host Copy that command in full and lets go over to our windows10 RDP session Open a Powershell prompt as administrator Now, paste yourCaldera agent Powershell one-liner and hit enter to download and execute the agent Once this is done, we can go back to our Caldera server GUI Click the \"x\" in the top right corner of the agent selection box you were in, and you should now see an agent has checked into the Caldera server Before we move on to emulating adversary activity, let's explore some of the information the agent provides us As you can see if gives a uniqueagent id, the host, protocol, agent, process id, and if the agent is running in a privileged context or not. But if we click on the green process id, we can see a lot more details We have a much more detailed view of our agent to include parent process id, location of our executable, and the user we are running as Wealsoaregiventheabilitytoeditcertainfieldsdenotedby*andkill our agent Nowclickthexinthetoprighttoleavethisview Adversaries Select the hamburger menu in the top left of your screen and click the adversaries tab which will open and drop you down to the following screen As you can see the adversaries tab, allows us to create our own custom profile (adversary) or view the profiles already created within Caldera Let's take a look at a pre-made adversary profile so we can explore what makes up a profile Click the \u201cSelect an existing profile\u201d dropdown and select the Enumerator profile Enumerator is the name of the profile Enumerate Processes in all theways is a description of the profile Beneath ordering you can see the choose TTPs and in what order they are to be executed These are the basic building blocks of an adversary Lets look at what one of these TTPs looks like up close Click on the WMIC Process Enumeration block, andyoushouldseethe following screen We can see everything about this specific TTP: unique id, name, description, tactic, technique id, and technique name. Below the generic information, you can see what platform it is compatible with and what is being utilized to execute this technique Scroll down further and you will see the command that is being executed, along with a cleanup command and timeout value Now, click the \"x\" in the top right corner of the screen and we will create our own profile to execute on our \u201cvictim\u201d Under profiles, change the slider from \"view\" to \"add\" I\u2019m going to use the profile name of \"Test\" but you can use whatever name you like Next, I will fill out a clear description e.g. \u201ca set of TTPs for displaying Caldera\u2019s functionality\u201d Let's add some abilities to our profile Click the +add ability selector on the right side of your screen, which will pop up a familiar menu Let's select a TTP: discovery tactic, T1007 System Service Discovery, and Discover System Services ability If you scroll down, you will see the command being run is the Powershell cmdlet Get-Service executed by Powershell as evidenced by the psh executor Click the green add to adversary button in the bottom left of the screen to add this TTP to our profile You can see we now have added this TTP as the first step in our attack I\u2019ve added a second attack ability -- you can add as many as you wish, but for my purposes here this will be fine Save this profile and move on to executing it with our agent on the windows10 box Once saved, you will see \"Adversary Saved\"! Operations Scroll up and click the hamburger menu in the top left of the Caldera interface, and select the Operations tab to display the following screen: There are currently no operations created, so clicking the\u201cOperations\u201d dropdown will not display anything... so let's create our own operation Click the slider to change it from view to add This allows you to specify a number of options in order to configure your operation successfully I will name it \"Operation Test\" Click Basic Options and we'll cover what this provides: The first dropdown sets your group and by default all agents are added to the \u201cred\u201d group which is what I have selected The second dropdown sets the profile you would like this operation to run. I have selected the Test profile I created earlier The third dropdown sets the option to close this operation orleave it open for future execution. I have set this to auto close since this is a lab The last dropdown sets the operation to run immediately after starting, or pausing for you to inspect it. I have set it run immediately Click Basic Options to close it and click Autonomous The first dropdown sets the operation to run autonomously or manually with approval of each TTP executed The second dropdown sets which planner you will utilize to execute the operation. A planner is a module within CALDERA which contains logic for how a running operation should make decisions about abilities to use and in what order The final dropdown sets the facts you will use during the operation. A fact is an identifiable piece of information about a given computer. Facts are directly related to variables, which can be used inside abilities Now click \"Autonomous\" to close it and click on \"Stealth\" The only dropdown here allows for you to select a number of obfuscation techniques to obscure the commands you run on the host system The second field sets the jittervalue. Agents normally check in with CALDERA every 60 seconds. Once they realize they are part of an active operation, agents will start checking in according to the jitter time, which is by default 2/8. This fraction tells the agents that they should pause between 2 and 8 seconds (picked at random each time an agent checks in) before using the next ability The visibility slider lets you set how stealthy your operation will remain. How visible should the operation be to the defense. This defaults to 51 because each ability defaults to a visibility of 50. Abilities with a higher visibility than the operation visibility will be skipped Click Stealth to close it Don\u2019t click Schedule. Schedule allows for scheduling this operation for a later time, which we will not be doing in this lab Now click start to begin you roperation and select include agent output There is a lot here, but much of it is self-explanatory The first option to note is the ability at the top of the screen to stop, pause, play, and skip the operation Another option is the ability at any time to switch your operation from an autonomous to a manual one Now we can see that our Discover System Services ability was executed on the host and since we enabled the inclusion of agent output if we can click the star at the end of the ability line we should be able to see the output from the command Click the x in the top right corner to return to the operation screen Congratulations!! You have successfully deployed an agent, created an adversary profile, created an operation and run that profile against a host. Now, let's cleanup up the range environment Clean Up Normally you might want to save all operations and profiles you create, but in this instance we'll get rid of them so you can start fresh First, we will delete this operation. Go ahead and click the green delete button located under download report which will revert your screen back to the original operations screen Next, click the x in the top left corner of the operations tab to remove it from your interface You should now be on the profiles tab which you can do the same thing in. Click the green delete profile button, click ok and then the red x in the top left hand corner For the final piece, lets kill our agent and remove it from the agents tab Click the green agent PID and select kill agent then select ok Wait for the agent PID to turn red or refresh the Caldera browser tab and go back to the agents tab. This may take a minute or two depending on the agents configuration Once the agent shows as terminated, click the red x at the end of it to remove it from your view and you are all cleaned up....aside from one thing. The windows box. If you want to ensure a clean windows box you can use the stationctl management menu to perform a soft reset and revert the windows box back to a clean instance taken upon deployment Thrunting Now lets switch over to our Kibana session and go to the Discover tab. Select the logs-* index The best way to view the activity we conducted on our host is to filter down the data to just want we want to see in this case I want to see process creation events and I want to display the user, parent process name, executing process name and command line. Since the agent we used was named \"Splunkd\", filtering down the wanted activity will be easy. Let's walk through what's been done here: I've filtered the data set using the winlog channel field which contains the different event subscriptions we have available to us. Since we want a specific windows event ID, I chose the Security channel. I then wanted to specify the process creation event id of 4688, which I did by utilizing the event.code field. Lastly, I knew the name of my implant was Splunkd so I filtered on the parent process name field to specify the Splunkd process name To view the specific fields I wanted to see, I can simply search for the field names on the left hand side and added them to my table As you can see, we have this Splunkd.exe spawning Powershell.exe as the user vagrant on the windows10 host to run the Get-Service command There are a number of different detections we could write for this, but that is a lab for another day. Conclusion Hopefully this lab helped you gain a basic understand of Caldera, how a C2 framework works and how to hunt the activity Caldera conducts using Kibana.","title":"Caldera Usage"},{"location":"toolset/caldera-usage/#caldera-basic-usage-lab","text":"","title":"Caldera Basic Usage Lab"},{"location":"toolset/caldera-usage/#goals","text":"At the end of this lab you will be able to: Startup the Caldera server Understand and use the Caldera interface Configure and deploy a Caldera agent to a \u201cvictim\u201d host 4. View and create adversary profiles Create and run an operation Hunt for operation activity in Kibana","title":"Goals"},{"location":"toolset/caldera-usage/#pre-reqs","text":"Let's get set up for this lab: Vagrant up the elastomic and windows10 box: vagrant up ts.elastomic ts.windows10 Establish an RDP session with the windows10 box with the RDPclient of your choice, with the following data: host:192.168.33.11 user:vagrant pass:vagrant","title":"Pre-Reqs"},{"location":"toolset/caldera-usage/#startup","text":"Caldera comes pre-installed on the elastomic host, and is located in the /home/vagrant directory. In order to utilize it you only need to start up the Caldera server, so let\u2019s do that. First ssh into the elastomic box with the following command: vagrant ssh ts.elastomic Once you are ssh\u2019d into elastomic, move into the Caldera directory: cd caldera Start up the Caldera server by running: python3 server.py \u2014 insecure The server startup will take at most 30 seconds, after which we can validate by pointing your local browser to http://localhost:8888 . You should see the following:","title":"Startup"},{"location":"toolset/caldera-usage/#interface","text":"Now that we have our server running hosted locally, we can login and take a look around Default credentials for your Caldera server are: admin:admin After successfully logging in you should see the Caldera welcome page Click on the hamburger menu next to navigate in the top left corner to dis play the different options Caldera provides The primary menu options you will be concerned with are the Agents, Adversaries, and Operations sections.","title":"Interface"},{"location":"toolset/caldera-usage/#agents","text":"We will start with the agents tab, so go ahead and click it This tab allows us to configure, create, and deploy an agent on one of our \u201cvictim\u201d boxes that will communicate back to our Caldera server where we can run our operations from. Before we create our agent, lets explore some of the up front configuration options we have available","title":"Agents"},{"location":"toolset/caldera-usage/#beacon-timer","text":"Beacon timer allows you to specify how long your agent will wait to check in and send back data. By default, these values are set to 30 and 60 which is fine. You may want to change these if you are emulating a specific adversary, or just trying to remain undetected from any hunting the defender may be doing.","title":"Beacon Timer"},{"location":"toolset/caldera-usage/#watchdog-timer","text":"Watchdog timer lets you set the number of seconds to wait once the server is unreachable, before killing an agent.","title":"Watchdog Timer"},{"location":"toolset/caldera-usage/#untrusted-timer","text":"Untrusted timer sets the number of seconds to wait before marking a missing agent as untrusted.","title":"Untrusted Timer"},{"location":"toolset/caldera-usage/#implant-name","text":"The base name of newly-spawned agents. If necessary, an extension will be added when an agent is created e.g splunkd will become splunkd.exe when spawning an agent on a Windows machine.","title":"Implant Name"},{"location":"toolset/caldera-usage/#bootstrap-ability","text":"Bootstrap ability is a comma-separated list of ability IDs to be run on a new agent beacon. By default, this is set to run a command which clears command history. Now that we understand the available configuration options, lets go ahead and generate a new agent for us to deploy to our windows10 box We are going to use the default values for this test, so go ahead and choose \u201cclick here to deploy an agent\u201d button and you will see the following option If you click the dropdown for \u201cChoose an agent\u201d you will see anumber of options Each of these agents provide a brief description The only two I have tested are \"54ndc47\" and \"Manxagents\" For general purposes, use the 54ndc47 agent as it was developed directly for use with Caldera Choose the 54ndc47 agent and select the \u201cAllplatforms\u201d dropdown to choose your OS For this lab, we will choose windows for our windows10 host For the app.contact.http field, you will supply the ip or url of your Caldera server: 192.168.33.10:8888 Caldera generates a Powershell command to download and execute the Caldera GoLang agent on your windows10 host Copy that command in full and lets go over to our windows10 RDP session Open a Powershell prompt as administrator Now, paste yourCaldera agent Powershell one-liner and hit enter to download and execute the agent Once this is done, we can go back to our Caldera server GUI Click the \"x\" in the top right corner of the agent selection box you were in, and you should now see an agent has checked into the Caldera server Before we move on to emulating adversary activity, let's explore some of the information the agent provides us As you can see if gives a uniqueagent id, the host, protocol, agent, process id, and if the agent is running in a privileged context or not. But if we click on the green process id, we can see a lot more details We have a much more detailed view of our agent to include parent process id, location of our executable, and the user we are running as Wealsoaregiventheabilitytoeditcertainfieldsdenotedby*andkill our agent Nowclickthexinthetoprighttoleavethisview","title":"Bootstrap Ability"},{"location":"toolset/caldera-usage/#adversaries","text":"Select the hamburger menu in the top left of your screen and click the adversaries tab which will open and drop you down to the following screen As you can see the adversaries tab, allows us to create our own custom profile (adversary) or view the profiles already created within Caldera Let's take a look at a pre-made adversary profile so we can explore what makes up a profile Click the \u201cSelect an existing profile\u201d dropdown and select the Enumerator profile Enumerator is the name of the profile Enumerate Processes in all theways is a description of the profile Beneath ordering you can see the choose TTPs and in what order they are to be executed These are the basic building blocks of an adversary Lets look at what one of these TTPs looks like up close Click on the WMIC Process Enumeration block, andyoushouldseethe following screen We can see everything about this specific TTP: unique id, name, description, tactic, technique id, and technique name. Below the generic information, you can see what platform it is compatible with and what is being utilized to execute this technique Scroll down further and you will see the command that is being executed, along with a cleanup command and timeout value Now, click the \"x\" in the top right corner of the screen and we will create our own profile to execute on our \u201cvictim\u201d Under profiles, change the slider from \"view\" to \"add\" I\u2019m going to use the profile name of \"Test\" but you can use whatever name you like Next, I will fill out a clear description e.g. \u201ca set of TTPs for displaying Caldera\u2019s functionality\u201d Let's add some abilities to our profile Click the +add ability selector on the right side of your screen, which will pop up a familiar menu Let's select a TTP: discovery tactic, T1007 System Service Discovery, and Discover System Services ability If you scroll down, you will see the command being run is the Powershell cmdlet Get-Service executed by Powershell as evidenced by the psh executor Click the green add to adversary button in the bottom left of the screen to add this TTP to our profile You can see we now have added this TTP as the first step in our attack I\u2019ve added a second attack ability -- you can add as many as you wish, but for my purposes here this will be fine Save this profile and move on to executing it with our agent on the windows10 box Once saved, you will see \"Adversary Saved\"!","title":"Adversaries"},{"location":"toolset/caldera-usage/#operations","text":"Scroll up and click the hamburger menu in the top left of the Caldera interface, and select the Operations tab to display the following screen: There are currently no operations created, so clicking the\u201cOperations\u201d dropdown will not display anything... so let's create our own operation Click the slider to change it from view to add This allows you to specify a number of options in order to configure your operation successfully I will name it \"Operation Test\" Click Basic Options and we'll cover what this provides: The first dropdown sets your group and by default all agents are added to the \u201cred\u201d group which is what I have selected The second dropdown sets the profile you would like this operation to run. I have selected the Test profile I created earlier The third dropdown sets the option to close this operation orleave it open for future execution. I have set this to auto close since this is a lab The last dropdown sets the operation to run immediately after starting, or pausing for you to inspect it. I have set it run immediately Click Basic Options to close it and click Autonomous The first dropdown sets the operation to run autonomously or manually with approval of each TTP executed The second dropdown sets which planner you will utilize to execute the operation. A planner is a module within CALDERA which contains logic for how a running operation should make decisions about abilities to use and in what order The final dropdown sets the facts you will use during the operation. A fact is an identifiable piece of information about a given computer. Facts are directly related to variables, which can be used inside abilities Now click \"Autonomous\" to close it and click on \"Stealth\" The only dropdown here allows for you to select a number of obfuscation techniques to obscure the commands you run on the host system The second field sets the jittervalue. Agents normally check in with CALDERA every 60 seconds. Once they realize they are part of an active operation, agents will start checking in according to the jitter time, which is by default 2/8. This fraction tells the agents that they should pause between 2 and 8 seconds (picked at random each time an agent checks in) before using the next ability The visibility slider lets you set how stealthy your operation will remain. How visible should the operation be to the defense. This defaults to 51 because each ability defaults to a visibility of 50. Abilities with a higher visibility than the operation visibility will be skipped Click Stealth to close it Don\u2019t click Schedule. Schedule allows for scheduling this operation for a later time, which we will not be doing in this lab Now click start to begin you roperation and select include agent output There is a lot here, but much of it is self-explanatory The first option to note is the ability at the top of the screen to stop, pause, play, and skip the operation Another option is the ability at any time to switch your operation from an autonomous to a manual one Now we can see that our Discover System Services ability was executed on the host and since we enabled the inclusion of agent output if we can click the star at the end of the ability line we should be able to see the output from the command Click the x in the top right corner to return to the operation screen Congratulations!! You have successfully deployed an agent, created an adversary profile, created an operation and run that profile against a host. Now, let's cleanup up the range environment","title":"Operations"},{"location":"toolset/caldera-usage/#clean-up","text":"Normally you might want to save all operations and profiles you create, but in this instance we'll get rid of them so you can start fresh First, we will delete this operation. Go ahead and click the green delete button located under download report which will revert your screen back to the original operations screen Next, click the x in the top left corner of the operations tab to remove it from your interface You should now be on the profiles tab which you can do the same thing in. Click the green delete profile button, click ok and then the red x in the top left hand corner For the final piece, lets kill our agent and remove it from the agents tab Click the green agent PID and select kill agent then select ok Wait for the agent PID to turn red or refresh the Caldera browser tab and go back to the agents tab. This may take a minute or two depending on the agents configuration Once the agent shows as terminated, click the red x at the end of it to remove it from your view and you are all cleaned up....aside from one thing. The windows box. If you want to ensure a clean windows box you can use the stationctl management menu to perform a soft reset and revert the windows box back to a clean instance taken upon deployment","title":"Clean Up"},{"location":"toolset/caldera-usage/#thrunting","text":"Now lets switch over to our Kibana session and go to the Discover tab. Select the logs-* index The best way to view the activity we conducted on our host is to filter down the data to just want we want to see in this case I want to see process creation events and I want to display the user, parent process name, executing process name and command line. Since the agent we used was named \"Splunkd\", filtering down the wanted activity will be easy. Let's walk through what's been done here: I've filtered the data set using the winlog channel field which contains the different event subscriptions we have available to us. Since we want a specific windows event ID, I chose the Security channel. I then wanted to specify the process creation event id of 4688, which I did by utilizing the event.code field. Lastly, I knew the name of my implant was Splunkd so I filtered on the parent process name field to specify the Splunkd process name To view the specific fields I wanted to see, I can simply search for the field names on the left hand side and added them to my table As you can see, we have this Splunkd.exe spawning Powershell.exe as the user vagrant on the windows10 host to run the Get-Service command There are a number of different detections we could write for this, but that is a lab for another day.","title":"Thrunting"},{"location":"toolset/caldera-usage/#conclusion","text":"Hopefully this lab helped you gain a basic understand of Caldera, how a C2 framework works and how to hunt the activity Caldera conducts using Kibana.","title":"Conclusion"}]}