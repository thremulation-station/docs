{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Thremulation Station LOGO HERE Threat Hunting: the best video game of all! What is it? Welcome to the Thremulation Station User Guide. The goal of this project is to create a Vagrant Multi-Machine training environment in order to conduct threat detection classes during drill weekend classes. How do I use it? A detailed walkthrough can be found in the Usage Guide How can I help? We welcome contributions, but if you don't know where to start or what to do check out contribution guide . If you're lost, please ask and we can help guide you to the right place to get started.","title":"Home"},{"location":"#thremulation-station","text":"LOGO HERE Threat Hunting: the best video game of all!","title":"Thremulation Station"},{"location":"#what-is-it","text":"Welcome to the Thremulation Station User Guide. The goal of this project is to create a Vagrant Multi-Machine training environment in order to conduct threat detection classes during drill weekend classes.","title":"What is it?"},{"location":"#how-do-i-use-it","text":"A detailed walkthrough can be found in the Usage Guide","title":"How do I use it?"},{"location":"#how-can-i-help","text":"We welcome contributions, but if you don't know where to start or what to do check out contribution guide . If you're lost, please ask and we can help guide you to the right place to get started.","title":"How can I help?"},{"location":"contribution/","text":"Community Contribution This document aims to provides instructinos to set up, develop, and submit updates and features for this project. Here is a high level overview of the process: fork the project clone to your local machine setup local environment with docker use the local container to update documentation Install Requirements This section assumes that you are using macOS. Use the brew package manager where noted below (and generally whenever possible). Install Git: $ brew install git instructions for installing brew can be found here ADD Git the Things Clone the repo locally by copy / pasting the full command by clicking the \"Clone\" in the top right corner of the web UI: $ # example command: git clone <CLONE_URL> Change directory into the project folder: $ cd thremulation-station Create an new branch (alternate timeline) for later pull request / merging operations: $ git branch <BRANCH_NAME> Jump into your new personal branch: $ git checkout <BRANCH_NAME> Content Development TODO Submitting Changes After the above workflow is complete, it's time to submit your work for approval: With all your work committed, push your changes up to your project fork: $ git push Use the Github graphical interface to submit an official Pull Request to merge in all your changes.","title":"Contribution"},{"location":"contribution/#community-contribution","text":"This document aims to provides instructinos to set up, develop, and submit updates and features for this project. Here is a high level overview of the process: fork the project clone to your local machine setup local environment with docker use the local container to update documentation","title":"Community Contribution"},{"location":"contribution/#install-requirements","text":"This section assumes that you are using macOS. Use the brew package manager where noted below (and generally whenever possible). Install Git: $ brew install git instructions for installing brew can be found here ADD","title":"Install Requirements"},{"location":"contribution/#git-the-things","text":"Clone the repo locally by copy / pasting the full command by clicking the \"Clone\" in the top right corner of the web UI: $ # example command: git clone <CLONE_URL> Change directory into the project folder: $ cd thremulation-station Create an new branch (alternate timeline) for later pull request / merging operations: $ git branch <BRANCH_NAME> Jump into your new personal branch: $ git checkout <BRANCH_NAME>","title":"Git the Things"},{"location":"contribution/#content-development","text":"TODO","title":"Content Development"},{"location":"contribution/#submitting-changes","text":"After the above workflow is complete, it's time to submit your work for approval: With all your work committed, push your changes up to your project fork: $ git push Use the Github graphical interface to submit an official Pull Request to merge in all your changes.","title":"Submitting Changes"},{"location":"getting-started/","text":"Getting Started TLDR If you're ready to skip all this info and get things running, jump to Installation page. Toolset At the end of the day, this project builds some fantastic open source lego pieces together to solve a problem. Here's what is being leveraged to make locally served thremulation magic happen: Infrastructure Virtualbox Vagrant (and assorted plugins) Packer Ansible Threat Emulation TODO Atomic TODO Threat Logging & Detection Elasticsearch TODO Kibana TODO Elastic Security TODO Continue to the next section for more details on the topology.","title":"Overview"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#tldr","text":"If you're ready to skip all this info and get things running, jump to Installation page.","title":"TLDR"},{"location":"getting-started/#toolset","text":"At the end of the day, this project builds some fantastic open source lego pieces together to solve a problem. Here's what is being leveraged to make locally served thremulation magic happen:","title":"Toolset"},{"location":"getting-started/#infrastructure","text":"Virtualbox Vagrant (and assorted plugins) Packer Ansible","title":"Infrastructure"},{"location":"getting-started/#threat-emulation","text":"TODO","title":"Threat Emulation"},{"location":"getting-started/#atomic","text":"TODO","title":"Atomic"},{"location":"getting-started/#threat-logging-detection","text":"","title":"Threat Logging &amp; Detection"},{"location":"getting-started/#elasticsearch","text":"TODO","title":"Elasticsearch"},{"location":"getting-started/#kibana","text":"TODO","title":"Kibana"},{"location":"getting-started/#elastic-security","text":"TODO Continue to the next section for more details on the topology.","title":"Elastic Security"},{"location":"getting-started/deployment/","text":"Deployment Once you have all the requirements installed, it's time to deploy the mini-range. Build the Range Once all the tools have been install, it's time to deploy the local range. TODO: update below block to reference stationctl cli when complete. Move into this repo's vagrant directory. Example: cd thremulation-station/vagrant Kick of the import / build / provisioning of all machines: vagrant up Get yourself some :coffee: , this will take 10-20 min depending on your connection Note: This is a bandwidth-intensive task that will download all the boxes that you selected. These downloads will only happen the first time you deploy. Drink you cup very very slowly? Initial Access This lab environment is designed for users to interact with 2 primary interfaces: Atomic Redteam - Execute Threats This adversary emulation toolset is accessed by sshing into the \"elastic\" box and starting a powershell session. ssh to the elastic vbox: $ vagrant ssh elastic start a powershell session $ pwsh Kibana WebUI - Detect Threats to reach Kibana browse to localhost:5601 Kibana Credentials user: vagrant pass: vagrant once in Kibana click the 3 hash dropdown menu in the upper left corner of the UI and select the \"Discover\" tab. Ensure that the timepicker is set to the most recent timeframe, example \"Last 24 hours\".","title":"Deployment"},{"location":"getting-started/deployment/#deployment","text":"Once you have all the requirements installed, it's time to deploy the mini-range.","title":"Deployment"},{"location":"getting-started/deployment/#build-the-range","text":"Once all the tools have been install, it's time to deploy the local range. TODO: update below block to reference stationctl cli when complete. Move into this repo's vagrant directory. Example: cd thremulation-station/vagrant Kick of the import / build / provisioning of all machines: vagrant up Get yourself some :coffee: , this will take 10-20 min depending on your connection Note: This is a bandwidth-intensive task that will download all the boxes that you selected. These downloads will only happen the first time you deploy. Drink you cup very very slowly?","title":"Build the Range"},{"location":"getting-started/deployment/#initial-access","text":"This lab environment is designed for users to interact with 2 primary interfaces: Atomic Redteam - Execute Threats This adversary emulation toolset is accessed by sshing into the \"elastic\" box and starting a powershell session. ssh to the elastic vbox: $ vagrant ssh elastic start a powershell session $ pwsh Kibana WebUI - Detect Threats to reach Kibana browse to localhost:5601 Kibana Credentials user: vagrant pass: vagrant once in Kibana click the 3 hash dropdown menu in the upper left corner of the UI and select the \"Discover\" tab. Ensure that the timepicker is set to the most recent timeframe, example \"Last 24 hours\".","title":"Initial Access"},{"location":"getting-started/installation/","text":"Installation Getting Requirements Following the installation steps for your host platform. If you don't see your OS flavor, consider contributing . macOS Install the Homebrew package manager Update brew: brew update Install remaining requirements. You can copy / paste the following into your terminal: brew cask install virtualbox vagrant brew install ansible git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Windows10 If you're on a Windows box, we recommend using Chocolatey for package management. Install remaining requirements. You can copy / paste the following into your terminal: choco install virtualbox vagrant choco install ansible git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Note: Vagrant requires a restart as part of the installation. Linux (RHEL) This section assumes that you're using a RHEL-based distro, preferrably Centos 7. All commands assume a root shell ( sudo -s ). Install requirements yum groupinstall -y \"Development Tools\" yum install -y \\ kernel-devel \\ kernel-devel-3.10.0-1127.el7.x86_64 \\ epel-release \\ yum install -y ansible Install VirtualBox a. curl -o /etc/yum.repos.d/virtualbox.repo http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo b. rpm --import https://www.virtualbox.org/download/oracle_vbox.asc c. yum install -y VirtualBox-6.0 Install Vagrant a. yum install -y https://releases.hashicorp.com/vagrant/2.2.10/vagrant_2.2.10_x86_64.rpm b. vagrant plugin install vagrant-disksize c. vagrant plugin install vagrant-vbguest Getting the Project Now that you have git installed, you can clone the project locally: $ git clone https://github.com/mocyber/ThreatEmulation-DetectionLab.git","title":"Installation"},{"location":"getting-started/installation/#installation","text":"","title":"Installation"},{"location":"getting-started/installation/#getting-requirements","text":"Following the installation steps for your host platform. If you don't see your OS flavor, consider contributing . macOS Install the Homebrew package manager Update brew: brew update Install remaining requirements. You can copy / paste the following into your terminal: brew cask install virtualbox vagrant brew install ansible git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Windows10 If you're on a Windows box, we recommend using Chocolatey for package management. Install remaining requirements. You can copy / paste the following into your terminal: choco install virtualbox vagrant choco install ansible git vagrant plugin install vagrant-disksize vagrant plugin install vagrant-vbguest Note: Vagrant requires a restart as part of the installation. Linux (RHEL) This section assumes that you're using a RHEL-based distro, preferrably Centos 7. All commands assume a root shell ( sudo -s ). Install requirements yum groupinstall -y \"Development Tools\" yum install -y \\ kernel-devel \\ kernel-devel-3.10.0-1127.el7.x86_64 \\ epel-release \\ yum install -y ansible Install VirtualBox a. curl -o /etc/yum.repos.d/virtualbox.repo http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo b. rpm --import https://www.virtualbox.org/download/oracle_vbox.asc c. yum install -y VirtualBox-6.0 Install Vagrant a. yum install -y https://releases.hashicorp.com/vagrant/2.2.10/vagrant_2.2.10_x86_64.rpm b. vagrant plugin install vagrant-disksize c. vagrant plugin install vagrant-vbguest","title":"Getting Requirements"},{"location":"getting-started/installation/#getting-the-project","text":"Now that you have git installed, you can clone the project locally: $ git clone https://github.com/mocyber/ThreatEmulation-DetectionLab.git","title":"Getting the Project"},{"location":"getting-started/node-details/","text":"Node Details This section lists the building blocks of how each node is set up. Elastomic Purpose The elastomic node is the first and only required node, and is the crux of the entire project. It's essentially a \"Purple Teaming\" control box that is used to both execute attacks and capture logs of those attacks . Features Elasticsearch Kibana Atomic Redteam UI Powershell Running Services Elasticsearch Kibana Windows10 Workstation Purpose The Windows10 node acts as the primary target system to execute effects against, in order to generate security event data. Features Build from Windows 10 x64 Enterprise trial ISO WinRM Enable (unauthenticated mode, for Packer/Vagrant to use) Vagrant user Create a vagrant user (as is the style) Grab all the Windows updates it can Installs VM guest additions Turn off Hibernation Turn on RDP Set the network type for the virtual adapter to 'Home' and not bug you about it Turns autologin off TODO edit above Running Services Elastic Agent Winlogbeat TODO Centos Server Purpose The intent of the centos node is emulate hosting the typical services hosted on a small enterprise environment and provided another OS attack surface. Features Powershell Running Services Auditbeat Auditd Filebeat Cockpit Nginx Rsyslog Samba","title":"Node Details"},{"location":"getting-started/node-details/#node-details","text":"This section lists the building blocks of how each node is set up.","title":"Node Details"},{"location":"getting-started/node-details/#elastomic","text":"","title":"Elastomic"},{"location":"getting-started/node-details/#purpose","text":"The elastomic node is the first and only required node, and is the crux of the entire project. It's essentially a \"Purple Teaming\" control box that is used to both execute attacks and capture logs of those attacks .","title":"Purpose"},{"location":"getting-started/node-details/#features","text":"Elasticsearch Kibana Atomic Redteam UI Powershell","title":"Features"},{"location":"getting-started/node-details/#running-services","text":"Elasticsearch Kibana","title":"Running Services"},{"location":"getting-started/node-details/#windows10-workstation","text":"","title":"Windows10 Workstation"},{"location":"getting-started/node-details/#purpose_1","text":"The Windows10 node acts as the primary target system to execute effects against, in order to generate security event data.","title":"Purpose"},{"location":"getting-started/node-details/#features_1","text":"Build from Windows 10 x64 Enterprise trial ISO WinRM Enable (unauthenticated mode, for Packer/Vagrant to use) Vagrant user Create a vagrant user (as is the style) Grab all the Windows updates it can Installs VM guest additions Turn off Hibernation Turn on RDP Set the network type for the virtual adapter to 'Home' and not bug you about it Turns autologin off TODO edit above","title":"Features"},{"location":"getting-started/node-details/#running-services_1","text":"Elastic Agent Winlogbeat TODO","title":"Running Services"},{"location":"getting-started/node-details/#centos-server","text":"","title":"Centos Server"},{"location":"getting-started/node-details/#purpose_2","text":"The intent of the centos node is emulate hosting the typical services hosted on a small enterprise environment and provided another OS attack surface.","title":"Purpose"},{"location":"getting-started/node-details/#features_2","text":"Powershell","title":"Features"},{"location":"getting-started/node-details/#running-services_2","text":"Auditbeat Auditd Filebeat Cockpit Nginx Rsyslog Samba","title":"Running Services"},{"location":"getting-started/topology/","text":"Project Topology Let's look at an overview of the mini-range and demonstrate a basic exercise workflow. TODO: topology graphic Basic Workflow TODO","title":"Topology"},{"location":"getting-started/topology/#project-topology","text":"Let's look at an overview of the mini-range and demonstrate a basic exercise workflow. TODO: topology graphic","title":"Project Topology"},{"location":"getting-started/topology/#basic-workflow","text":"TODO","title":"Basic Workflow"},{"location":"support/","text":"Support","title":"Support"},{"location":"support/#support","text":"","title":"Support"},{"location":"support/references/","text":"References Links to external knowledgebases. TODO","title":"References"},{"location":"support/references/#references","text":"Links to external knowledgebases. TODO","title":"References"},{"location":"usage/","text":"Usage Guide Now that you have all the necessary tools and files, let's get started. Overview TODO: GRAPHIC showing nodes with: services running tools available basic workflow","title":"Overview"},{"location":"usage/#usage-guide","text":"Now that you have all the necessary tools and files, let's get started.","title":"Usage Guide"},{"location":"usage/#overview","text":"TODO: GRAPHIC showing nodes with: services running tools available basic workflow","title":"Overview"},{"location":"usage/functions-check/","text":"Functions Check (First Threat) Let's take some time to both validate functionality of all tooling, as well as demonstrate general usage of your new \"mini-range\". From your terminal run $ vagrant ssh elastic to remotely access the \"elastic\" logger / attacker box. Your prompt will update to the following [vagrant@elastomic ~]$ . Enter pwsh to drop into a Powershell prompt. Now it is time to choose what test or attack you would like to run against the remote Windows 10 box. You can browse the available tests by referencing the Atomic Redteam Docs . For this demonstration we will conduct a Mimikatz test for technique \"T1059.001 TestNumber 1\". This will use Powershell to download Mimikatz and then dump credentials on the system. Before we can run this test against the Windows 10 box we first need to setup a Powershell Session over SSH to the Windows 10 box Run the following command: $sess = New-PSSession -Hostname 192.168.33.11 -Username vagrant Here we create a variable ( $sess ) and set it to our new session we just created using the Powershell cmdlet New-PSSession. You will prompted to accept the host and enter the password (vagrant). Now in order The syntax to launch an attack against a remmote host is as follows: Invoke-AtomicTest # Run Atomic Test T1059.001 # Technique ID -TestNumbers 1 # TestNumber -Session $sess # use our Session variable Run the following command to kick things off: Invoke-AtomicTest T1059.001 -TestNumbers 1 -Session $sess Once complete now go back to your Discover tab in Kibana. In the search bar type \" Mimikatz \" and hit Enter. You should see results filtered to show the events matching the Mimikatz attack you just executed. Cleanup Now most if not all AtomicRedTeam tests come with a cleanup command to clean up your test system before executing another test. In order to cleanup our Mimikatz test we can run the same command we used to execute it this time with a -Cleanup option at the end. Run the following command to clean house: Invoke-AtomicTest T1059.001 -TestNumbers 1 -Session $sess -Cleanup Taking Things Further Now you can dig into all of the events and start building detections based off of what logs its behavior produces after which you could run the test again to verify your detection logic is sound. You can do this by buidling your query using KQL or Lucene and then going to the \"Detections\" tab in Kibana and selecting \"Manage Detection Rules\". Congratulaltions you have executed your first test and hopefully wrote meaningful behavior based detections in order to help detect that activity in the future. Shutdown A.K.A \"It's broken and I dont know what to fix\" Once you are done playing in your sandbox, you need to clean things up. If you are in the middle of something and want to continue later, invoke a vagrant suspend . Otherwise, if you are done for the day invoke a vagrant halt . Last but not least, if you have goofed up your install you can use vagrant reload . vagrant --help is your friend.","title":"Functions Check"},{"location":"usage/functions-check/#functions-check-first-threat","text":"Let's take some time to both validate functionality of all tooling, as well as demonstrate general usage of your new \"mini-range\". From your terminal run $ vagrant ssh elastic to remotely access the \"elastic\" logger / attacker box. Your prompt will update to the following [vagrant@elastomic ~]$ . Enter pwsh to drop into a Powershell prompt. Now it is time to choose what test or attack you would like to run against the remote Windows 10 box. You can browse the available tests by referencing the Atomic Redteam Docs . For this demonstration we will conduct a Mimikatz test for technique \"T1059.001 TestNumber 1\". This will use Powershell to download Mimikatz and then dump credentials on the system. Before we can run this test against the Windows 10 box we first need to setup a Powershell Session over SSH to the Windows 10 box Run the following command: $sess = New-PSSession -Hostname 192.168.33.11 -Username vagrant Here we create a variable ( $sess ) and set it to our new session we just created using the Powershell cmdlet New-PSSession. You will prompted to accept the host and enter the password (vagrant). Now in order The syntax to launch an attack against a remmote host is as follows: Invoke-AtomicTest # Run Atomic Test T1059.001 # Technique ID -TestNumbers 1 # TestNumber -Session $sess # use our Session variable Run the following command to kick things off: Invoke-AtomicTest T1059.001 -TestNumbers 1 -Session $sess Once complete now go back to your Discover tab in Kibana. In the search bar type \" Mimikatz \" and hit Enter. You should see results filtered to show the events matching the Mimikatz attack you just executed.","title":"Functions Check (First Threat)"},{"location":"usage/functions-check/#cleanup","text":"Now most if not all AtomicRedTeam tests come with a cleanup command to clean up your test system before executing another test. In order to cleanup our Mimikatz test we can run the same command we used to execute it this time with a -Cleanup option at the end. Run the following command to clean house: Invoke-AtomicTest T1059.001 -TestNumbers 1 -Session $sess -Cleanup","title":"Cleanup"},{"location":"usage/functions-check/#taking-things-further","text":"Now you can dig into all of the events and start building detections based off of what logs its behavior produces after which you could run the test again to verify your detection logic is sound. You can do this by buidling your query using KQL or Lucene and then going to the \"Detections\" tab in Kibana and selecting \"Manage Detection Rules\". Congratulaltions you have executed your first test and hopefully wrote meaningful behavior based detections in order to help detect that activity in the future.","title":"Taking Things Further"},{"location":"usage/functions-check/#shutdown","text":"A.K.A \"It's broken and I dont know what to fix\" Once you are done playing in your sandbox, you need to clean things up. If you are in the middle of something and want to continue later, invoke a vagrant suspend . Otherwise, if you are done for the day invoke a vagrant halt . Last but not least, if you have goofed up your install you can use vagrant reload . vagrant --help is your friend.","title":"Shutdown"}]}